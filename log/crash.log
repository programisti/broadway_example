2021-08-07 16:01:15 =CRASH REPORT====
  crasher:
    initial call: rabbit_writer:enter_mainloop/2
    pid: <0.852.0>
    registered_name: []
    exception error: {function_clause,[{lists,reverse,[#{a => 1}],[{file,"lists.erl"},{line,147}]},{rabbit_binary_generator,build_content_frames,3,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_binary_generator.erl"},{line,72}]},{rabbit_binary_generator,build_simple_content_frames,4,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_binary_generator.erl"},{line,61}]},{rabbit_writer,assemble_frames,5,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,331}]},{rabbit_writer,internal_send_command_async,3,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,362}]},{rabbit_writer,handle_message,3,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,229}]},{rabbit_writer,mainloop1,2,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,213}]},{rabbit_writer,mainloop,2,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,204}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.849.0>,<0.843.0>,<0.841.0>,<0.840.0>,amqp_sup,<0.476.0>]
    message_queue_len: 1
    messages: [{'$gen_call',{<0.851.0>,#Ref<0.3691801579.3102212102.232158>},flush}]
    links: [<0.849.0>]
    dictionary: [{process_name,{rabbit_writer,{<<"client 127.0.0.1:55537 -> 127.0.0.1:5672">>,1}}}]
    trap_exit: false
    status: running
    heap_size: 1598
    stack_size: 28
    reductions: 549
  neighbours:
2021-08-07 16:01:15 =SUPERVISOR REPORT====
     Supervisor: {<0.849.0>,amqp_channel_sup}
     Context:    child_terminated
     Reason:     {function_clause,[{lists,reverse,[#{a => 1}],[{file,"lists.erl"},{line,147}]},{rabbit_binary_generator,build_content_frames,3,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_binary_generator.erl"},{line,72}]},{rabbit_binary_generator,build_simple_content_frames,4,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_binary_generator.erl"},{line,61}]},{rabbit_writer,assemble_frames,5,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,331}]},{rabbit_writer,internal_send_command_async,3,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,362}]},{rabbit_writer,handle_message,3,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,229}]},{rabbit_writer,mainloop1,2,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,213}]},{rabbit_writer,mainloop,2,[{file,"/Users/zaali/dev/example/deps/rabbit_common/src/rabbit_writer.erl"},{line,204}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.852.0>},{id,writer},{mfargs,{rabbit_writer,start_link,[#Port<0.34>,1,131072,rabbit_framing_amqp_0_9_1,<0.851.0>,{<<"client 127.0.0.1:55537 -> 127.0.0.1:5672">>,1},false,1000000000]}},{restart_type,transient},{shutdown,30000},{child_type,worker}]

2021-08-07 16:01:15 =SUPERVISOR REPORT====
     Supervisor: {<0.849.0>,amqp_channel_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.852.0>},{id,writer},{mfargs,{rabbit_writer,start_link,[#Port<0.34>,1,131072,rabbit_framing_amqp_0_9_1,<0.851.0>,{<<"client 127.0.0.1:55537 -> 127.0.0.1:5672">>,1},false,1000000000]}},{restart_type,transient},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:25 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[246805057339119750|257605342731467682]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.748.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.751.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:25 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[231765919860551285|272613822352582378]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.747.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.752.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.662.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.747.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.752.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.665.0>,#Ref<0.3771952939.2313682949.127417>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.665.0>,#Ref<0.3771952939.2313682949.127417>},{ask,10}},{'$gen_producer',{<0.666.0>,#Ref<0.3771952939.2313682950.125823>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.666.0>,#Ref<0.3771952939.2313682950.125823>},{ask,10}},{'$gen_producer',{<0.667.0>,#Ref<0.3771952939.2313682945.132486>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.667.0>,#Ref<0.3771952939.2313682945.132486>},{ask,10}},{'$gen_producer',{<0.668.0>,#Ref<0.3771952939.2313682949.127420>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.668.0>,#Ref<0.3771952939.2313682949.127420>},{ask,10}},{'$gen_producer',{<0.669.0>,#Ref<0.3771952939.2313682945.132489>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.669.0>,#Ref<0.3771952939.2313682945.132489>},{ask,10}},{'$gen_producer',{<0.670.0>,#Ref<0.3771952939.2313682945.132492>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.670.0>,#Ref<0.3771952939.2313682945.132492>},{ask,10}},{'$gen_producer',{<0.671.0>,#Ref<0.3771952939.2313682945.132495>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.671.0>,#Ref<0.3771952939.2313682945.132495>},{ask,10}},{'$gen_producer',{<0.672.0>,#Ref<0.3771952939.2313682949.127424>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.672.0>,#Ref<0.3771952939.2313682949.127424>},{ask,10}},{'$gen_producer',{<0.673.0>,#Ref<0.3771952939.2313682949.127426>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.673.0>,#Ref<0.3771952939.2313682949.127426>},{ask,10}},{'$gen_producer',{<0.674.0>,#Ref<0.3771952939.2313682949.127429>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.674.0>,#Ref<0.3771952939.2313682949.127429>},{ask,10}},{'$gen_producer',{<0.675.0>,#Ref<0.3771952939.2313682949.127432>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.675.0>,#Ref<0.3771952939.2313682949.127432>},{ask,10}},{'$gen_producer',{<0.676.0>,#Ref<0.3771952939.2313682949.127436>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.676.0>,#Ref<0.3771952939.2313682949.127436>},{ask,10}},{'$gen_producer',{<0.677.0>,#Ref<0.3771952939.2313682945.132498>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.677.0>,#Ref<0.3771952939.2313682945.132498>},{ask,10}},{'$gen_producer',{<0.678.0>,#Ref<0.3771952939.2313682945.132501>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.678.0>,#Ref<0.3771952939.2313682945.132501>},{ask,10}},{'$gen_producer',{<0.679.0>,#Ref<0.3771952939.2313682945.132503>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.679.0>,#Ref<0.3771952939.2313682945.132503>},{ask,10}},{'$gen_producer',{<0.680.0>,#Ref<0.3771952939.2313682945.132506>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.680.0>,#Ref<0.3771952939.2313682945.132506>},{ask,10}},{'$gen_producer',{<0.681.0>,#Ref<0.3771952939.2313682945.132510>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.681.0>,#Ref<0.3771952939.2313682945.132510>},{ask,10}},{'$gen_producer',{<0.682.0>,#Ref<0.3771952939.2313682945.132512>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.682.0>,#Ref<0.3771952939.2313682945.132512>},{ask,10}},{'$gen_producer',{<0.683.0>,#Ref<0.3771952939.2313682949.127438>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.683.0>,#Ref<0.3771952939.2313682949.127438>},{ask,10}},{'$gen_producer',{<0.684.0>,#Ref<0.3771952939.2313682949.127442>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.684.0>,#Ref<0.3771952939.2313682949.127442>},{ask,10}},{'$gen_producer',{<0.685.0>,#Ref<0.3771952939.2313682949.127444>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.685.0>,#Ref<0.3771952939.2313682949.127444>},{ask,10}},{'$gen_producer',{<0.686.0>,#Ref<0.3771952939.2313682949.127448>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.686.0>,#Ref<0.3771952939.2313682949.127448>},{ask,10}},{'$gen_producer',{<0.687.0>,#Ref<0.3771952939.2313682949.127450>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.687.0>,#Ref<0.3771952939.2313682949.127450>},{ask,10}},{'$gen_producer',{<0.688.0>,#Ref<0.3771952939.2313682949.127453>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.688.0>,#Ref<0.3771952939.2313682949.127453>},{ask,10}},{'$gen_producer',{<0.689.0>,#Ref<0.3771952939.2313682945.132515>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.689.0>,#Ref<0.3771952939.2313682945.132515>},{ask,10}},{'$gen_producer',{<0.690.0>,#Ref<0.3771952939.2313682945.132518>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.690.0>,#Ref<0.3771952939.2313682945.132518>},{ask,10}},{'$gen_producer',{<0.691.0>,#Ref<0.3771952939.2313682945.132522>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.691.0>,#Ref<0.3771952939.2313682945.132522>},{ask,10}},{'$gen_producer',{<0.692.0>,#Ref<0.3771952939.2313682945.132524>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.692.0>,#Ref<0.3771952939.2313682945.132524>},{ask,10}},{'$gen_producer',{<0.693.0>,#Ref<0.3771952939.2313682945.132527>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.693.0>,#Ref<0.3771952939.2313682945.132527>},{ask,10}},{'$gen_producer',{<0.694.0>,#Ref<0.3771952939.2313682945.132531>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.694.0>,#Ref<0.3771952939.2313682945.132531>},{ask,10}},{'$gen_producer',{<0.695.0>,#Ref<0.3771952939.2313682945.132534>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.695.0>,#Ref<0.3771952939.2313682945.132534>},{ask,10}},{'$gen_producer',{<0.696.0>,#Ref<0.3771952939.2313682950.125825>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.696.0>,#Ref<0.3771952939.2313682950.125825>},{ask,10}},{'$gen_producer',{<0.697.0>,#Ref<0.3771952939.2313682950.125829>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.697.0>,#Ref<0.3771952939.2313682950.125829>},{ask,10}},{'$gen_producer',{<0.698.0>,#Ref<0.3771952939.2313682950.125832>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.698.0>,#Ref<0.3771952939.2313682950.125832>},{ask,10}},{'$gen_producer',{<0.699.0>,#Ref<0.3771952939.2313682950.125834>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.699.0>,#Ref<0.3771952939.2313682950.125834>},{ask,10}},{'$gen_producer',{<0.700.0>,#Ref<0.3771952939.2313682950.125837>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.700.0>,#Ref<0.3771952939.2313682950.125837>},{ask,10}},{'$gen_producer',{<0.701.0>,#Ref<0.3771952939.2313682950.125841>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.701.0>,#Ref<0.3771952939.2313682950.125841>},{ask,10}},{'$gen_producer',{<0.702.0>,#Ref<0.3771952939.2313682950.125844>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.702.0>,#Ref<0.3771952939.2313682950.125844>},{ask,10}},{'$gen_producer',{<0.703.0>,#Ref<0.3771952939.2313682950.125847>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.703.0>,#Ref<0.3771952939.2313682950.125847>},{ask,10}},{'$gen_producer',{<0.704.0>,#Ref<0.3771952939.2313682950.125850>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.704.0>,#Ref<0.3771952939.2313682950.125850>},{ask,10}},{'$gen_producer',{<0.705.0>,#Ref<0.3771952939.2313682949.127456>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.705.0>,#Ref<0.3771952939.2313682949.127456>},{ask,10}},{'$gen_producer',{<0.706.0>,#Ref<0.3771952939.2313682945.132541>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.706.0>,#Ref<0.3771952939.2313682945.132541>},{ask,10}},{'$gen_producer',{<0.707.0>,#Ref<0.3771952939.2313682945.132544>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.707.0>,#Ref<0.3771952939.2313682945.132544>},{ask,10}},{'$gen_producer',{<0.708.0>,#Ref<0.3771952939.2313682950.125852>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.708.0>,#Ref<0.3771952939.2313682950.125852>},{ask,10}},{'$gen_producer',{<0.709.0>,#Ref<0.3771952939.2313682950.125856>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.709.0>,#Ref<0.3771952939.2313682950.125856>},{ask,10}},{'$gen_producer',{<0.710.0>,#Ref<0.3771952939.2313682945.132547>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.710.0>,#Ref<0.3771952939.2313682945.132547>},{ask,10}},{'$gen_producer',{<0.711.0>,#Ref<0.3771952939.2313682950.125858>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.711.0>,#Ref<0.3771952939.2313682950.125858>},{ask,10}},{'$gen_producer',{<0.712.0>,#Ref<0.3771952939.2313682950.125861>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.712.0>,#Ref<0.3771952939.2313682950.125861>},{ask,10}},{'$gen_producer',{<0.713.0>,#Ref<0.3771952939.2313682945.132550>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.713.0>,#Ref<0.3771952939.2313682945.132550>},{ask,10}},{'$gen_producer',{<0.714.0>,#Ref<0.3771952939.2313682949.127460>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.714.0>,#Ref<0.3771952939.2313682949.127460>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682948.125653>,process,<0.747.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.661.0>,<0.727.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 51849
  neighbours:
2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.663.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.748.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.751.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.665.0>,#Ref<0.3771952939.2313682949.127418>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.665.0>,#Ref<0.3771952939.2313682949.127418>},{ask,10}},{'$gen_producer',{<0.666.0>,#Ref<0.3771952939.2313682950.125822>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.666.0>,#Ref<0.3771952939.2313682950.125822>},{ask,10}},{'$gen_producer',{<0.667.0>,#Ref<0.3771952939.2313682945.132485>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.667.0>,#Ref<0.3771952939.2313682945.132485>},{ask,10}},{'$gen_producer',{<0.668.0>,#Ref<0.3771952939.2313682949.127421>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.668.0>,#Ref<0.3771952939.2313682949.127421>},{ask,10}},{'$gen_producer',{<0.669.0>,#Ref<0.3771952939.2313682945.132488>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.669.0>,#Ref<0.3771952939.2313682945.132488>},{ask,10}},{'$gen_producer',{<0.670.0>,#Ref<0.3771952939.2313682945.132491>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.670.0>,#Ref<0.3771952939.2313682945.132491>},{ask,10}},{'$gen_producer',{<0.671.0>,#Ref<0.3771952939.2313682945.132494>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.671.0>,#Ref<0.3771952939.2313682945.132494>},{ask,10}},{'$gen_producer',{<0.672.0>,#Ref<0.3771952939.2313682949.127423>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.672.0>,#Ref<0.3771952939.2313682949.127423>},{ask,10}},{'$gen_producer',{<0.673.0>,#Ref<0.3771952939.2313682949.127427>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.673.0>,#Ref<0.3771952939.2313682949.127427>},{ask,10}},{'$gen_producer',{<0.674.0>,#Ref<0.3771952939.2313682949.127430>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.674.0>,#Ref<0.3771952939.2313682949.127430>},{ask,10}},{'$gen_producer',{<0.675.0>,#Ref<0.3771952939.2313682949.127433>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.675.0>,#Ref<0.3771952939.2313682949.127433>},{ask,10}},{'$gen_producer',{<0.676.0>,#Ref<0.3771952939.2313682949.127435>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.676.0>,#Ref<0.3771952939.2313682949.127435>},{ask,10}},{'$gen_producer',{<0.677.0>,#Ref<0.3771952939.2313682945.132497>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.677.0>,#Ref<0.3771952939.2313682945.132497>},{ask,10}},{'$gen_producer',{<0.678.0>,#Ref<0.3771952939.2313682945.132500>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.678.0>,#Ref<0.3771952939.2313682945.132500>},{ask,10}},{'$gen_producer',{<0.679.0>,#Ref<0.3771952939.2313682945.132504>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.679.0>,#Ref<0.3771952939.2313682945.132504>},{ask,10}},{'$gen_producer',{<0.680.0>,#Ref<0.3771952939.2313682945.132507>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.680.0>,#Ref<0.3771952939.2313682945.132507>},{ask,10}},{'$gen_producer',{<0.681.0>,#Ref<0.3771952939.2313682945.132509>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.681.0>,#Ref<0.3771952939.2313682945.132509>},{ask,10}},{'$gen_producer',{<0.682.0>,#Ref<0.3771952939.2313682945.132513>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.682.0>,#Ref<0.3771952939.2313682945.132513>},{ask,10}},{'$gen_producer',{<0.683.0>,#Ref<0.3771952939.2313682949.127439>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.683.0>,#Ref<0.3771952939.2313682949.127439>},{ask,10}},{'$gen_producer',{<0.684.0>,#Ref<0.3771952939.2313682949.127441>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.684.0>,#Ref<0.3771952939.2313682949.127441>},{ask,10}},{'$gen_producer',{<0.685.0>,#Ref<0.3771952939.2313682949.127445>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.685.0>,#Ref<0.3771952939.2313682949.127445>},{ask,10}},{'$gen_producer',{<0.686.0>,#Ref<0.3771952939.2313682949.127447>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.686.0>,#Ref<0.3771952939.2313682949.127447>},{ask,10}},{'$gen_producer',{<0.687.0>,#Ref<0.3771952939.2313682949.127451>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.687.0>,#Ref<0.3771952939.2313682949.127451>},{ask,10}},{'$gen_producer',{<0.688.0>,#Ref<0.3771952939.2313682949.127454>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.688.0>,#Ref<0.3771952939.2313682949.127454>},{ask,10}},{'$gen_producer',{<0.689.0>,#Ref<0.3771952939.2313682945.132516>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.689.0>,#Ref<0.3771952939.2313682945.132516>},{ask,10}},{'$gen_producer',{<0.690.0>,#Ref<0.3771952939.2313682945.132519>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.690.0>,#Ref<0.3771952939.2313682945.132519>},{ask,10}},{'$gen_producer',{<0.691.0>,#Ref<0.3771952939.2313682945.132521>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.691.0>,#Ref<0.3771952939.2313682945.132521>},{ask,10}},{'$gen_producer',{<0.692.0>,#Ref<0.3771952939.2313682945.132525>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.692.0>,#Ref<0.3771952939.2313682945.132525>},{ask,10}},{'$gen_producer',{<0.693.0>,#Ref<0.3771952939.2313682945.132528>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.693.0>,#Ref<0.3771952939.2313682945.132528>},{ask,10}},{'$gen_producer',{<0.694.0>,#Ref<0.3771952939.2313682945.132530>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.694.0>,#Ref<0.3771952939.2313682945.132530>},{ask,10}},{'$gen_producer',{<0.695.0>,#Ref<0.3771952939.2313682945.132533>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.695.0>,#Ref<0.3771952939.2313682945.132533>},{ask,10}},{'$gen_producer',{<0.696.0>,#Ref<0.3771952939.2313682950.125826>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.696.0>,#Ref<0.3771952939.2313682950.125826>},{ask,10}},{'$gen_producer',{<0.697.0>,#Ref<0.3771952939.2313682950.125828>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.697.0>,#Ref<0.3771952939.2313682950.125828>},{ask,10}},{'$gen_producer',{<0.698.0>,#Ref<0.3771952939.2313682950.125831>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.698.0>,#Ref<0.3771952939.2313682950.125831>},{ask,10}},{'$gen_producer',{<0.699.0>,#Ref<0.3771952939.2313682950.125835>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.699.0>,#Ref<0.3771952939.2313682950.125835>},{ask,10}},{'$gen_producer',{<0.700.0>,#Ref<0.3771952939.2313682950.125838>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.700.0>,#Ref<0.3771952939.2313682950.125838>},{ask,10}},{'$gen_producer',{<0.701.0>,#Ref<0.3771952939.2313682950.125840>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.701.0>,#Ref<0.3771952939.2313682950.125840>},{ask,10}},{'$gen_producer',{<0.702.0>,#Ref<0.3771952939.2313682950.125843>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.702.0>,#Ref<0.3771952939.2313682950.125843>},{ask,10}},{'$gen_producer',{<0.703.0>,#Ref<0.3771952939.2313682950.125846>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.703.0>,#Ref<0.3771952939.2313682950.125846>},{ask,10}},{'$gen_producer',{<0.704.0>,#Ref<0.3771952939.2313682950.125849>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.704.0>,#Ref<0.3771952939.2313682950.125849>},{ask,10}},{'$gen_producer',{<0.705.0>,#Ref<0.3771952939.2313682949.127457>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.705.0>,#Ref<0.3771952939.2313682949.127457>},{ask,10}},{'$gen_producer',{<0.706.0>,#Ref<0.3771952939.2313682945.132542>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.706.0>,#Ref<0.3771952939.2313682945.132542>},{ask,10}},{'$gen_producer',{<0.707.0>,#Ref<0.3771952939.2313682945.132545>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.707.0>,#Ref<0.3771952939.2313682945.132545>},{ask,10}},{'$gen_producer',{<0.708.0>,#Ref<0.3771952939.2313682950.125853>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.708.0>,#Ref<0.3771952939.2313682950.125853>},{ask,10}},{'$gen_producer',{<0.709.0>,#Ref<0.3771952939.2313682950.125855>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.709.0>,#Ref<0.3771952939.2313682950.125855>},{ask,10}},{'$gen_producer',{<0.710.0>,#Ref<0.3771952939.2313682945.132548>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.710.0>,#Ref<0.3771952939.2313682945.132548>},{ask,10}},{'$gen_producer',{<0.711.0>,#Ref<0.3771952939.2313682950.125859>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.711.0>,#Ref<0.3771952939.2313682950.125859>},{ask,10}},{'$gen_producer',{<0.712.0>,#Ref<0.3771952939.2313682950.125862>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.712.0>,#Ref<0.3771952939.2313682950.125862>},{ask,10}},{'$gen_producer',{<0.713.0>,#Ref<0.3771952939.2313682945.132551>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.713.0>,#Ref<0.3771952939.2313682945.132551>},{ask,10}},{'$gen_producer',{<0.714.0>,#Ref<0.3771952939.2313682949.127459>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.714.0>,#Ref<0.3771952939.2313682949.127459>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682948.125649>,process,<0.748.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.661.0>,<0.730.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 47830
  neighbours:
2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.747.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.752.0>},60000]}}
     Offender:   [{pid,<0.662.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:25 =ERROR REPORT====
** Generic server <0.727.0> terminating 
** Last message in was {'EXIT',<0.662.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.747.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.752.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.18>,<<"client 127.0.0.1:59553 -> 127.0.0.1:5672">>,10,<0.735.0>,131072,<0.726.0>,undefined,false},<0.733.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.662.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.747.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.752.0>},\n                                                      60000]}}"
2021-08-07 17:45:25 =ERROR REPORT====
** Generic server <0.730.0> terminating 
** Last message in was {'EXIT',<0.663.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.748.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.751.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.17>,<<"client 127.0.0.1:59552 -> 127.0.0.1:5672">>,10,<0.736.0>,131072,<0.729.0>,undefined,false},<0.734.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.663.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.748.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.751.0>},\n                                                      60000]}}"
2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.748.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.751.0>},60000]}}
     Offender:   [{pid,<0.663.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.730.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.663.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.748.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.751.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.728.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.728.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59552 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28205
  neighbours:
2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.727.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.662.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.747.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.752.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.724.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.724.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59553 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28205
  neighbours:
2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.728.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.663.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.748.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.751.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.730.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.729.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.728.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.730.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.729.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.724.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.662.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.747.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.752.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.727.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.726.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.724.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.727.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.726.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[228834060937205004|275598454342535991]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.775.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.781.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.754.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.775.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.781.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682948.125727>,process,<0.775.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.661.0>,<0.760.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45628
  neighbours:
2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.775.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.781.0>},60000]}}
     Offender:   [{pid,<0.754.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:25 =ERROR REPORT====
** Generic server <0.760.0> terminating 
** Last message in was {'EXIT',<0.754.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.775.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.781.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.20>,<<"client 127.0.0.1:59555 -> 127.0.0.1:5672">>,10,<0.765.0>,131072,<0.759.0>,undefined,false},<0.763.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.754.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.775.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.781.0>},\n                                                      60000]}}"
2021-08-07 17:45:25 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[126214968876440362|89935370408246590]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.779.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.782.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.760.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.754.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.775.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.781.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.758.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.758.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59555 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28159
  neighbours:
2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.758.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.754.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.775.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.781.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.760.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.759.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.758.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.760.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.759.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.753.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.779.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.782.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682945.132902>,process,<0.779.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.661.0>,<0.757.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45632
  neighbours:
2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.779.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.782.0>},60000]}}
     Offender:   [{pid,<0.753.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:25 =ERROR REPORT====
** Generic server <0.757.0> terminating 
** Last message in was {'EXIT',<0.753.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.779.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.782.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.19>,<<"client 127.0.0.1:59554 -> 127.0.0.1:5672">>,10,<0.766.0>,131072,<0.756.0>,undefined,false},<0.764.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.753.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.779.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.782.0>},\n                                                      60000]}}"
2021-08-07 17:45:25 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.757.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.753.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.779.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.782.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.755.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.755.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59554 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28160
  neighbours:
2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.755.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.753.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.779.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.782.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.757.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.756.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =SUPERVISOR REPORT====
     Supervisor: {<0.755.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.757.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.756.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:25 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[189172322033477762|26937190088751290]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.805.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.811.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:27 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[64371727758852317|7693922205120739]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.809.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.812.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:27 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.784.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.805.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.811.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682945.132982>,process,<0.805.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.661.0>,<0.794.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45632
  neighbours:
2021-08-07 17:45:27 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.805.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.811.0>},60000]}}
     Offender:   [{pid,<0.784.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:27 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.784.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:27 =ERROR REPORT====
** Generic server <0.794.0> terminating 
** Last message in was {'EXIT',<0.784.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.805.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.811.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.22>,<<"client 127.0.0.1:59557 -> 127.0.0.1:5672">>,10,<0.797.0>,131072,<0.793.0>,undefined,false},<0.796.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.784.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.805.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.811.0>},\n                                                      60000]}}"
2021-08-07 17:45:27 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.783.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.809.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.812.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 2
    messages: [{'DOWN',#Ref<0.3771952939.2313682949.127752>,process,<0.809.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}},{'EXIT',<0.661.0>,shutdown}]
    links: [<0.787.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45631
  neighbours:
2021-08-07 17:45:27 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.809.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.812.0>},60000]}}
     Offender:   [{pid,<0.783.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:27 =ERROR REPORT====
** Generic server <0.787.0> terminating 
** Last message in was {'EXIT',<0.783.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.809.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.812.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.21>,<<"client 127.0.0.1:59556 -> 127.0.0.1:5672">>,10,<0.790.0>,131072,<0.786.0>,undefined,false},<0.789.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.783.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.809.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.812.0>},\n                                                      60000]}}"
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.661.0>},{id,#Ref<0.3771952939.2313682945.132223>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.794.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.784.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.805.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.811.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.791.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.791.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59557 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28160
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.791.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.784.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.805.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.811.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.794.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.793.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.791.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.794.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.793.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.787.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.783.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.809.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.812.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.785.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.785.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59556 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28159
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.785.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.783.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.809.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.812.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.787.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.786.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.785.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.787.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.786.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[11985651507047540|204127367527889775]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.900.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.903.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:28 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[272918340735558808|231510603987633711]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.899.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.904.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.815.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.899.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.904.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.817.0>,#Ref<0.3771952939.2313682947.125473>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.817.0>,#Ref<0.3771952939.2313682947.125473>},{ask,10}},{'$gen_producer',{<0.818.0>,#Ref<0.3771952939.2313682947.125476>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.818.0>,#Ref<0.3771952939.2313682947.125476>},{ask,10}},{'$gen_producer',{<0.821.0>,#Ref<0.3771952939.2313682947.125480>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.821.0>,#Ref<0.3771952939.2313682947.125480>},{ask,10}},{'$gen_producer',{<0.823.0>,#Ref<0.3771952939.2313682947.125483>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.823.0>,#Ref<0.3771952939.2313682947.125483>},{ask,10}},{'$gen_producer',{<0.824.0>,#Ref<0.3771952939.2313682946.125701>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.824.0>,#Ref<0.3771952939.2313682946.125701>},{ask,10}},{'$gen_producer',{<0.825.0>,#Ref<0.3771952939.2313682949.127877>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.825.0>,#Ref<0.3771952939.2313682949.127877>},{ask,10}},{'$gen_producer',{<0.826.0>,#Ref<0.3771952939.2313682947.125502>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.826.0>,#Ref<0.3771952939.2313682947.125502>},{ask,10}},{'$gen_producer',{<0.827.0>,#Ref<0.3771952939.2313682946.125717>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.827.0>,#Ref<0.3771952939.2313682946.125717>},{ask,10}},{'$gen_producer',{<0.828.0>,#Ref<0.3771952939.2313682947.125507>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.828.0>,#Ref<0.3771952939.2313682947.125507>},{ask,10}},{'$gen_producer',{<0.829.0>,#Ref<0.3771952939.2313682946.125723>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.829.0>,#Ref<0.3771952939.2313682946.125723>},{ask,10}},{'$gen_producer',{<0.830.0>,#Ref<0.3771952939.2313682949.127882>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.830.0>,#Ref<0.3771952939.2313682949.127882>},{ask,10}},{'$gen_producer',{<0.831.0>,#Ref<0.3771952939.2313682949.127885>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.831.0>,#Ref<0.3771952939.2313682949.127885>},{ask,10}},{'$gen_producer',{<0.832.0>,#Ref<0.3771952939.2313682949.127889>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.832.0>,#Ref<0.3771952939.2313682949.127889>},{ask,10}},{'$gen_producer',{<0.833.0>,#Ref<0.3771952939.2313682949.127892>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.833.0>,#Ref<0.3771952939.2313682949.127892>},{ask,10}},{'$gen_producer',{<0.834.0>,#Ref<0.3771952939.2313682949.127894>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.834.0>,#Ref<0.3771952939.2313682949.127894>},{ask,10}},{'$gen_producer',{<0.835.0>,#Ref<0.3771952939.2313682949.127897>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.835.0>,#Ref<0.3771952939.2313682949.127897>},{ask,10}},{'$gen_producer',{<0.836.0>,#Ref<0.3771952939.2313682948.125921>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.836.0>,#Ref<0.3771952939.2313682948.125921>},{ask,10}},{'$gen_producer',{<0.837.0>,#Ref<0.3771952939.2313682948.125923>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.837.0>,#Ref<0.3771952939.2313682948.125923>},{ask,10}},{'$gen_producer',{<0.838.0>,#Ref<0.3771952939.2313682948.125926>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.838.0>,#Ref<0.3771952939.2313682948.125926>},{ask,10}},{'$gen_producer',{<0.839.0>,#Ref<0.3771952939.2313682948.125929>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.839.0>,#Ref<0.3771952939.2313682948.125929>},{ask,10}},{'$gen_producer',{<0.840.0>,#Ref<0.3771952939.2313682948.125933>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.840.0>,#Ref<0.3771952939.2313682948.125933>},{ask,10}},{'$gen_producer',{<0.841.0>,#Ref<0.3771952939.2313682946.125787>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.841.0>,#Ref<0.3771952939.2313682946.125787>},{ask,10}},{'$gen_producer',{<0.842.0>,#Ref<0.3771952939.2313682946.125791>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.842.0>,#Ref<0.3771952939.2313682946.125791>},{ask,10}},{'$gen_producer',{<0.843.0>,#Ref<0.3771952939.2313682948.125936>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.843.0>,#Ref<0.3771952939.2313682948.125936>},{ask,10}},{'$gen_producer',{<0.844.0>,#Ref<0.3771952939.2313682949.127923>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.844.0>,#Ref<0.3771952939.2313682949.127923>},{ask,10}},{'$gen_producer',{<0.849.0>,#Ref<0.3771952939.2313682949.127926>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.849.0>,#Ref<0.3771952939.2313682949.127926>},{ask,10}},{'$gen_producer',{<0.851.0>,#Ref<0.3771952939.2313682949.127930>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.851.0>,#Ref<0.3771952939.2313682949.127930>},{ask,10}},{'$gen_producer',{<0.854.0>,#Ref<0.3771952939.2313682949.127932>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.854.0>,#Ref<0.3771952939.2313682949.127932>},{ask,10}},{'$gen_producer',{<0.855.0>,#Ref<0.3771952939.2313682949.127936>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.855.0>,#Ref<0.3771952939.2313682949.127936>},{ask,10}},{'$gen_producer',{<0.856.0>,#Ref<0.3771952939.2313682946.125809>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.856.0>,#Ref<0.3771952939.2313682946.125809>},{ask,10}},{'$gen_producer',{<0.857.0>,#Ref<0.3771952939.2313682948.125939>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.857.0>,#Ref<0.3771952939.2313682948.125939>},{ask,10}},{'$gen_producer',{<0.858.0>,#Ref<0.3771952939.2313682946.125812>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.858.0>,#Ref<0.3771952939.2313682946.125812>},{ask,10}},{'$gen_producer',{<0.859.0>,#Ref<0.3771952939.2313682946.125816>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.859.0>,#Ref<0.3771952939.2313682946.125816>},{ask,10}},{'$gen_producer',{<0.860.0>,#Ref<0.3771952939.2313682946.125818>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.860.0>,#Ref<0.3771952939.2313682946.125818>},{ask,10}},{'$gen_producer',{<0.861.0>,#Ref<0.3771952939.2313682948.125942>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.861.0>,#Ref<0.3771952939.2313682948.125942>},{ask,10}},{'$gen_producer',{<0.862.0>,#Ref<0.3771952939.2313682948.125946>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.862.0>,#Ref<0.3771952939.2313682948.125946>},{ask,10}},{'$gen_producer',{<0.863.0>,#Ref<0.3771952939.2313682948.125949>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.863.0>,#Ref<0.3771952939.2313682948.125949>},{ask,10}},{'$gen_producer',{<0.864.0>,#Ref<0.3771952939.2313682948.125953>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.864.0>,#Ref<0.3771952939.2313682948.125953>},{ask,10}},{'$gen_producer',{<0.867.0>,#Ref<0.3771952939.2313682948.125956>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.867.0>,#Ref<0.3771952939.2313682948.125956>},{ask,10}},{'$gen_producer',{<0.870.0>,#Ref<0.3771952939.2313682948.125959>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.870.0>,#Ref<0.3771952939.2313682948.125959>},{ask,10}},{'$gen_producer',{<0.871.0>,#Ref<0.3771952939.2313682948.125962>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.871.0>,#Ref<0.3771952939.2313682948.125962>},{ask,10}},{'$gen_producer',{<0.872.0>,#Ref<0.3771952939.2313682948.125964>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.872.0>,#Ref<0.3771952939.2313682948.125964>},{ask,10}},{'$gen_producer',{<0.873.0>,#Ref<0.3771952939.2313682948.125967>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.873.0>,#Ref<0.3771952939.2313682948.125967>},{ask,10}},{'$gen_producer',{<0.874.0>,#Ref<0.3771952939.2313682948.125970>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.874.0>,#Ref<0.3771952939.2313682948.125970>},{ask,10}},{'$gen_producer',{<0.875.0>,#Ref<0.3771952939.2313682946.125827>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.875.0>,#Ref<0.3771952939.2313682946.125827>},{ask,10}},{'$gen_producer',{<0.876.0>,#Ref<0.3771952939.2313682948.125973>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.876.0>,#Ref<0.3771952939.2313682948.125973>},{ask,10}},{'$gen_producer',{<0.877.0>,#Ref<0.3771952939.2313682946.125829>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.877.0>,#Ref<0.3771952939.2313682946.125829>},{ask,10}},{'$gen_producer',{<0.878.0>,#Ref<0.3771952939.2313682948.125976>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.878.0>,#Ref<0.3771952939.2313682948.125976>},{ask,10}},{'$gen_producer',{<0.879.0>,#Ref<0.3771952939.2313682948.125979>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.879.0>,#Ref<0.3771952939.2313682948.125979>},{ask,10}},{'$gen_producer',{<0.880.0>,#Ref<0.3771952939.2313682948.125983>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.880.0>,#Ref<0.3771952939.2313682948.125983>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682949.127978>,process,<0.899.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.813.0>,<0.847.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 45683
  neighbours:
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.814.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.900.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.903.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.817.0>,#Ref<0.3771952939.2313682947.125474>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.817.0>,#Ref<0.3771952939.2313682947.125474>},{ask,10}},{'$gen_producer',{<0.818.0>,#Ref<0.3771952939.2313682947.125477>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.818.0>,#Ref<0.3771952939.2313682947.125477>},{ask,10}},{'$gen_producer',{<0.821.0>,#Ref<0.3771952939.2313682947.125479>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.821.0>,#Ref<0.3771952939.2313682947.125479>},{ask,10}},{'$gen_producer',{<0.823.0>,#Ref<0.3771952939.2313682947.125482>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.823.0>,#Ref<0.3771952939.2313682947.125482>},{ask,10}},{'$gen_producer',{<0.824.0>,#Ref<0.3771952939.2313682946.125702>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.824.0>,#Ref<0.3771952939.2313682946.125702>},{ask,10}},{'$gen_producer',{<0.825.0>,#Ref<0.3771952939.2313682949.127876>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.825.0>,#Ref<0.3771952939.2313682949.127876>},{ask,10}},{'$gen_producer',{<0.826.0>,#Ref<0.3771952939.2313682947.125501>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.826.0>,#Ref<0.3771952939.2313682947.125501>},{ask,10}},{'$gen_producer',{<0.827.0>,#Ref<0.3771952939.2313682946.125716>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.827.0>,#Ref<0.3771952939.2313682946.125716>},{ask,10}},{'$gen_producer',{<0.828.0>,#Ref<0.3771952939.2313682947.125506>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.828.0>,#Ref<0.3771952939.2313682947.125506>},{ask,10}},{'$gen_producer',{<0.829.0>,#Ref<0.3771952939.2313682946.125722>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.829.0>,#Ref<0.3771952939.2313682946.125722>},{ask,10}},{'$gen_producer',{<0.830.0>,#Ref<0.3771952939.2313682949.127883>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.830.0>,#Ref<0.3771952939.2313682949.127883>},{ask,10}},{'$gen_producer',{<0.831.0>,#Ref<0.3771952939.2313682949.127886>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.831.0>,#Ref<0.3771952939.2313682949.127886>},{ask,10}},{'$gen_producer',{<0.832.0>,#Ref<0.3771952939.2313682949.127888>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.832.0>,#Ref<0.3771952939.2313682949.127888>},{ask,10}},{'$gen_producer',{<0.833.0>,#Ref<0.3771952939.2313682949.127891>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.833.0>,#Ref<0.3771952939.2313682949.127891>},{ask,10}},{'$gen_producer',{<0.834.0>,#Ref<0.3771952939.2313682949.127895>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.834.0>,#Ref<0.3771952939.2313682949.127895>},{ask,10}},{'$gen_producer',{<0.835.0>,#Ref<0.3771952939.2313682949.127898>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.835.0>,#Ref<0.3771952939.2313682949.127898>},{ask,10}},{'$gen_producer',{<0.836.0>,#Ref<0.3771952939.2313682948.125920>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.836.0>,#Ref<0.3771952939.2313682948.125920>},{ask,10}},{'$gen_producer',{<0.837.0>,#Ref<0.3771952939.2313682948.125924>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.837.0>,#Ref<0.3771952939.2313682948.125924>},{ask,10}},{'$gen_producer',{<0.838.0>,#Ref<0.3771952939.2313682948.125927>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.838.0>,#Ref<0.3771952939.2313682948.125927>},{ask,10}},{'$gen_producer',{<0.839.0>,#Ref<0.3771952939.2313682948.125930>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.839.0>,#Ref<0.3771952939.2313682948.125930>},{ask,10}},{'$gen_producer',{<0.840.0>,#Ref<0.3771952939.2313682948.125932>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.840.0>,#Ref<0.3771952939.2313682948.125932>},{ask,10}},{'$gen_producer',{<0.841.0>,#Ref<0.3771952939.2313682946.125788>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.841.0>,#Ref<0.3771952939.2313682946.125788>},{ask,10}},{'$gen_producer',{<0.842.0>,#Ref<0.3771952939.2313682946.125790>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.842.0>,#Ref<0.3771952939.2313682946.125790>},{ask,10}},{'$gen_producer',{<0.843.0>,#Ref<0.3771952939.2313682948.125935>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.843.0>,#Ref<0.3771952939.2313682948.125935>},{ask,10}},{'$gen_producer',{<0.844.0>,#Ref<0.3771952939.2313682949.127922>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.844.0>,#Ref<0.3771952939.2313682949.127922>},{ask,10}},{'$gen_producer',{<0.849.0>,#Ref<0.3771952939.2313682949.127927>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.849.0>,#Ref<0.3771952939.2313682949.127927>},{ask,10}},{'$gen_producer',{<0.851.0>,#Ref<0.3771952939.2313682949.127929>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.851.0>,#Ref<0.3771952939.2313682949.127929>},{ask,10}},{'$gen_producer',{<0.854.0>,#Ref<0.3771952939.2313682949.127933>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.854.0>,#Ref<0.3771952939.2313682949.127933>},{ask,10}},{'$gen_producer',{<0.855.0>,#Ref<0.3771952939.2313682949.127935>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.855.0>,#Ref<0.3771952939.2313682949.127935>},{ask,10}},{'$gen_producer',{<0.856.0>,#Ref<0.3771952939.2313682946.125808>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.856.0>,#Ref<0.3771952939.2313682946.125808>},{ask,10}},{'$gen_producer',{<0.857.0>,#Ref<0.3771952939.2313682948.125938>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.857.0>,#Ref<0.3771952939.2313682948.125938>},{ask,10}},{'$gen_producer',{<0.858.0>,#Ref<0.3771952939.2313682946.125813>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.858.0>,#Ref<0.3771952939.2313682946.125813>},{ask,10}},{'$gen_producer',{<0.859.0>,#Ref<0.3771952939.2313682946.125815>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.859.0>,#Ref<0.3771952939.2313682946.125815>},{ask,10}},{'$gen_producer',{<0.860.0>,#Ref<0.3771952939.2313682946.125819>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.860.0>,#Ref<0.3771952939.2313682946.125819>},{ask,10}},{'$gen_producer',{<0.861.0>,#Ref<0.3771952939.2313682948.125943>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.861.0>,#Ref<0.3771952939.2313682948.125943>},{ask,10}},{'$gen_producer',{<0.862.0>,#Ref<0.3771952939.2313682948.125945>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.862.0>,#Ref<0.3771952939.2313682948.125945>},{ask,10}},{'$gen_producer',{<0.863.0>,#Ref<0.3771952939.2313682948.125950>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.863.0>,#Ref<0.3771952939.2313682948.125950>},{ask,10}},{'$gen_producer',{<0.864.0>,#Ref<0.3771952939.2313682948.125952>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.864.0>,#Ref<0.3771952939.2313682948.125952>},{ask,10}},{'$gen_producer',{<0.867.0>,#Ref<0.3771952939.2313682948.125955>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.867.0>,#Ref<0.3771952939.2313682948.125955>},{ask,10}},{'$gen_producer',{<0.870.0>,#Ref<0.3771952939.2313682948.125958>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.870.0>,#Ref<0.3771952939.2313682948.125958>},{ask,10}},{'$gen_producer',{<0.871.0>,#Ref<0.3771952939.2313682948.125961>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.871.0>,#Ref<0.3771952939.2313682948.125961>},{ask,10}},{'$gen_producer',{<0.872.0>,#Ref<0.3771952939.2313682948.125965>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.872.0>,#Ref<0.3771952939.2313682948.125965>},{ask,10}},{'$gen_producer',{<0.873.0>,#Ref<0.3771952939.2313682948.125968>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.873.0>,#Ref<0.3771952939.2313682948.125968>},{ask,10}},{'$gen_producer',{<0.874.0>,#Ref<0.3771952939.2313682948.125971>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.874.0>,#Ref<0.3771952939.2313682948.125971>},{ask,10}},{'$gen_producer',{<0.875.0>,#Ref<0.3771952939.2313682946.125826>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.875.0>,#Ref<0.3771952939.2313682946.125826>},{ask,10}},{'$gen_producer',{<0.876.0>,#Ref<0.3771952939.2313682948.125974>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.876.0>,#Ref<0.3771952939.2313682948.125974>},{ask,10}},{'$gen_producer',{<0.877.0>,#Ref<0.3771952939.2313682946.125830>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.877.0>,#Ref<0.3771952939.2313682946.125830>},{ask,10}},{'$gen_producer',{<0.878.0>,#Ref<0.3771952939.2313682948.125977>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.878.0>,#Ref<0.3771952939.2313682948.125977>},{ask,10}},{'$gen_producer',{<0.879.0>,#Ref<0.3771952939.2313682948.125980>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.879.0>,#Ref<0.3771952939.2313682948.125980>},{ask,10}},{'$gen_producer',{<0.880.0>,#Ref<0.3771952939.2313682948.125982>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.880.0>,#Ref<0.3771952939.2313682948.125982>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682946.125903>,process,<0.900.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.813.0>,<0.822.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 46210
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.899.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.904.0>},60000]}}
     Offender:   [{pid,<0.815.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:28 =ERROR REPORT====
** Generic server <0.822.0> terminating 
** Last message in was {'EXIT',<0.814.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.900.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.903.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.23>,<<"client 127.0.0.1:59558 -> 127.0.0.1:5672">>,10,<0.852.0>,131072,<0.820.0>,undefined,false},<0.850.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.814.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.900.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.903.0>},\n                                                      60000]}}"
2021-08-07 17:45:28 =ERROR REPORT====
** Generic server <0.847.0> terminating 
** Last message in was {'EXIT',<0.815.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.899.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.904.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.24>,<<"client 127.0.0.1:59559 -> 127.0.0.1:5672">>,10,<0.868.0>,131072,<0.846.0>,undefined,false},<0.866.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.815.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.899.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.904.0>},\n                                                      60000]}}"
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.822.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.814.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.900.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.903.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.819.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.819.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59558 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28160
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.819.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.814.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.900.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.903.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.822.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.820.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.819.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.822.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.820.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.847.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.815.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.899.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.904.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.845.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.845.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59559 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28159
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.845.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.815.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.899.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.904.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.847.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.846.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.845.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.847.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.846.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.900.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.903.0>},60000]}}
     Offender:   [{pid,<0.814.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:28 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[31812071899676748|40215899510682696]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.929.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.934.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:28 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[66124970655003041|5920465170631281]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.930.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.933.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.906.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.930.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.933.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682949.128019>,process,<0.930.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.813.0>,<0.912.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45628
  neighbours:
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.905.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.929.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.934.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682948.126260>,process,<0.929.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.813.0>,<0.909.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45628
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.930.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.933.0>},60000]}}
     Offender:   [{pid,<0.906.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:28 =ERROR REPORT====
** Generic server <0.909.0> terminating 
** Last message in was {'EXIT',<0.905.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.929.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.934.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.25>,<<"client 127.0.0.1:59560 -> 127.0.0.1:5672">>,10,<0.918.0>,131072,<0.908.0>,undefined,false},<0.916.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.905.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.929.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.934.0>},\n                                                      60000]}}"
2021-08-07 17:45:28 =ERROR REPORT====
** Generic server <0.912.0> terminating 
** Last message in was {'EXIT',<0.906.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.930.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.933.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.26>,<<"client 127.0.0.1:59561 -> 127.0.0.1:5672">>,10,<0.917.0>,131072,<0.911.0>,undefined,false},<0.915.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.906.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.930.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.933.0>},\n                                                      60000]}}"
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.909.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.905.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.929.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.934.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.907.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.907.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59560 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28160
  neighbours:
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.912.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.906.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.930.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.933.0>},\n                                                      60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.910.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.910.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59561 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 28159
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.910.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.906.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.930.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.933.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.912.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.911.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.907.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.905.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.929.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.934.0>},\n                                                      60000]}}"
     Offender:   [{pid,<0.909.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.908.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.910.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.912.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.911.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {<0.907.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.909.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.908.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.929.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.934.0>},60000]}}
     Offender:   [{pid,<0.905.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:28 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[84724658331234274|131419268097367389]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.961.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.963.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:28 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[20759012600317039|51268744934617162]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.957.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.964.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.935.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.961.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.963.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682948.126577>,process,<0.961.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.813.0>,<0.939.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45628
  neighbours:
2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.961.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.963.0>},60000]}}
     Offender:   [{pid,<0.935.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:28 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.935.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:28 =ERROR REPORT====
** Generic server <0.939.0> terminating 
** Last message in was {'EXIT',<0.935.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.961.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.963.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.27>,<<"client 127.0.0.1:59562 -> 127.0.0.1:5672">>,10,<0.942.0>,131072,<0.938.0>,undefined,false},<0.941.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.935.0> died: {{shutdown,\n                                                     {server_initiated_close,\n                                                      404,\n                                                      <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                    {gen_server,call,\n                                                     [<0.961.0>,\n                                                      {subscribe,\n                                                       {'basic.consume',0,\n                                                        <<\"stock_queue\">>,\n                                                        <<>>,false,false,\n                                                        false,false,[]},\n                                                       <0.963.0>},\n                                                      60000]}}"
2021-08-07 17:45:28 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.936.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.957.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.964.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 2
    messages: [{'DOWN',#Ref<0.3771952939.2313682948.126579>,process,<0.957.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}},{'EXIT',<0.813.0>,shutdown}]
    links: [<0.946.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45631
  neighbours:
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[210706387988312694|5409597933916311]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2333.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2340.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[199044682085995278|89131000784005504]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2337.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2339.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2312.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2333.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2340.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682947.129472>,process,<0.2333.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2189.0>,<0.2318.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45626
  neighbours:
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2311.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2337.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2339.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682945.138122>,process,<0.2337.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2189.0>,<0.2315.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45626
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2333.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2340.0>},60000]}}
     Offender:   [{pid,<0.2312.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2312.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2337.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2339.0>},60000]}}
     Offender:   [{pid,<0.2311.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.2189.0>},{id,#Ref<0.3771952939.2313682945.135891>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:45:30 =ERROR REPORT====
** Generic server <0.2318.0> terminating 
** Last message in was {'EXIT',<0.2312.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2333.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2340.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.83>,<<"client 127.0.0.1:59619 -> 127.0.0.1:5672">>,10,<0.2325.0>,131072,<0.2317.0>,undefined,false},<0.2324.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.2312.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2333.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2340.0>},\n                                                       60000]}}"
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server <0.2315.0> terminating 
** Last message in was {'EXIT',<0.2311.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2337.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2339.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.82>,<<"client 127.0.0.1:59618 -> 127.0.0.1:5672">>,10,<0.2321.0>,131072,<0.2314.0>,undefined,false},<0.2320.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.2311.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2337.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2339.0>},\n                                                       60000]}}"
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.2318.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.2312.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2333.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2340.0>},\n                                                       60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.2316.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.2316.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59619 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28169
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2316.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.2312.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2333.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2340.0>},\n                                                       60000]}}"
     Offender:   [{pid,<0.2318.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2317.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2316.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2318.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2317.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.2315.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.2311.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2337.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2339.0>},\n                                                       60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.2313.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.2313.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59618 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28168
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2313.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.2311.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2337.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2339.0>},\n                                                       60000]}}"
     Offender:   [{pid,<0.2315.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2314.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2313.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2315.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2314.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[264146436914744498|96198184857620302]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2425.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2431.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[54146797241138121|162114340156670732]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2429.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2432.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2342.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2425.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2431.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682947.129536>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682947.129536>},{ask,10}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682947.129538>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682947.129538>},{ask,10}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682947.129541>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682947.129541>},{ask,10}},{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682947.129545>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682947.129545>},{ask,10}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682947.129547>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682947.129547>},{ask,10}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682947.129551>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682947.129551>},{ask,10}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682947.129554>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682947.129554>},{ask,10}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682947.129556>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682947.129556>},{ask,10}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682949.130771>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682949.130771>},{ask,10}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682945.138388>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682945.138388>},{ask,10}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138392>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138392>},{ask,10}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138395>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138395>},{ask,10}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682949.130801>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682949.130801>},{ask,10}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.130804>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.130804>},{ask,10}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682949.130806>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682949.130806>},{ask,10}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682947.129566>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682947.129566>},{ask,10}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682945.138409>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682945.138409>},{ask,10}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682945.138413>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682945.138413>},{ask,10}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682945.138416>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682945.138416>},{ask,10}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682945.138419>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682945.138419>},{ask,10}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682947.129595>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682947.129595>},{ask,10}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682945.138422>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682945.138422>},{ask,10}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682947.129597>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682947.129597>},{ask,10}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682947.129600>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682947.129600>},{ask,10}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682945.138430>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682945.138430>},{ask,10}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682945.138433>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682945.138433>},{ask,10}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682949.130857>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682949.130857>},{ask,10}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682947.129610>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682947.129610>},{ask,10}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.130862>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.130862>},{ask,10}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682947.129614>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682947.129614>},{ask,10}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682947.129617>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682947.129617>},{ask,10}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682947.129619>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682947.129619>},{ask,10}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682949.130864>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682949.130864>},{ask,10}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682949.130867>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682949.130867>},{ask,10}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682947.129622>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682947.129622>},{ask,10}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682947.129626>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682947.129626>},{ask,10}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.130870>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.130870>},{ask,10}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682949.130874>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682949.130874>},{ask,10}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682949.130877>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682949.130877>},{ask,10}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682945.138441>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682945.138441>},{ask,10}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682945.138444>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682945.138444>},{ask,10}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682945.138446>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682945.138446>},{ask,10}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682945.138450>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682945.138450>},{ask,10}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682945.138452>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682945.138452>},{ask,10}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138455>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138455>},{ask,10}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682945.138459>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682945.138459>},{ask,10}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682945.138461>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682945.138461>},{ask,10}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.130885>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.130885>},{ask,10}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682945.138464>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682945.138464>},{ask,10}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682949.130889>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682949.130889>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682945.138518>,process,<0.2425.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2341.0>,<0.2348.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 46331
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2425.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2431.0>},60000]}}
     Offender:   [{pid,<0.2342.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =ERROR REPORT====
** Generic server <0.2348.0> terminating 
** Last message in was {'EXIT',<0.2342.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2425.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2431.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.84>,<<"client 127.0.0.1:59620 -> 127.0.0.1:5672">>,10,<0.2368.0>,131072,<0.2346.0>,undefined,false},<0.2366.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.2342.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2425.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2431.0>},\n                                                       60000]}}"
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2343.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2429.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2432.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682947.129535>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682947.129535>},{ask,10}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682947.129539>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682947.129539>},{ask,10}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682947.129542>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682947.129542>},{ask,10}},{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682947.129544>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682947.129544>},{ask,10}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682947.129548>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682947.129548>},{ask,10}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682947.129550>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682947.129550>},{ask,10}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682947.129553>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682947.129553>},{ask,10}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682947.129557>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682947.129557>},{ask,10}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682949.130770>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682949.130770>},{ask,10}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682945.138389>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682945.138389>},{ask,10}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138391>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138391>},{ask,10}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138394>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138394>},{ask,10}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682949.130800>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682949.130800>},{ask,10}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.130803>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.130803>},{ask,10}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682949.130807>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682949.130807>},{ask,10}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682947.129565>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682947.129565>},{ask,10}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682945.138410>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682945.138410>},{ask,10}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682945.138412>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682945.138412>},{ask,10}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682945.138415>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682945.138415>},{ask,10}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682945.138418>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682945.138418>},{ask,10}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682947.129594>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682947.129594>},{ask,10}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682945.138421>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682945.138421>},{ask,10}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682947.129598>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682947.129598>},{ask,10}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682947.129601>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682947.129601>},{ask,10}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682945.138429>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682945.138429>},{ask,10}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682945.138432>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682945.138432>},{ask,10}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682949.130858>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682949.130858>},{ask,10}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682947.129609>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682947.129609>},{ask,10}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.130861>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.130861>},{ask,10}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682947.129613>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682947.129613>},{ask,10}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682947.129616>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682947.129616>},{ask,10}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682947.129620>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682947.129620>},{ask,10}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682949.130865>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682949.130865>},{ask,10}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682949.130868>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682949.130868>},{ask,10}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682947.129623>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682947.129623>},{ask,10}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682947.129625>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682947.129625>},{ask,10}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.130871>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.130871>},{ask,10}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682949.130873>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682949.130873>},{ask,10}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682949.130876>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682949.130876>},{ask,10}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682945.138440>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682945.138440>},{ask,10}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682945.138443>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682945.138443>},{ask,10}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682945.138447>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682945.138447>},{ask,10}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682945.138449>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682945.138449>},{ask,10}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682945.138453>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682945.138453>},{ask,10}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138456>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138456>},{ask,10}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682945.138458>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682945.138458>},{ask,10}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682945.138462>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682945.138462>},{ask,10}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.130886>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.130886>},{ask,10}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682945.138465>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682945.138465>},{ask,10}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682949.130888>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682949.130888>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682945.138525>,process,<0.2429.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2341.0>,<0.2382.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 45651
  neighbours:
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server <0.2382.0> terminating 
** Last message in was {'EXIT',<0.2343.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2429.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2432.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.85>,<<"client 127.0.0.1:59621 -> 127.0.0.1:5672">>,10,<0.2402.0>,131072,<0.2381.0>,undefined,false},<0.2400.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.2343.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2429.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2432.0>},\n                                                       60000]}}"
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.2348.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.2342.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2425.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2431.0>},\n                                                       60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.2345.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.2345.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59620 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28169
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2345.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.2342.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2425.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2431.0>},\n                                                       60000]}}"
     Offender:   [{pid,<0.2348.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2346.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2345.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2348.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2346.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2429.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2432.0>},60000]}}
     Offender:   [{pid,<0.2343.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.2382.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.2343.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2429.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2432.0>},\n                                                       60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.2379.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.2379.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59621 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28169
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2379.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.2343.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2429.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2432.0>},\n                                                       60000]}}"
     Offender:   [{pid,<0.2382.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2381.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2379.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2382.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2381.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[10702783473472111|205380386970894909]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2455.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2462.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[115269948543534625|244930572942249810]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2459.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2461.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2433.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2455.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2462.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682952.126013>,process,<0.2455.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2341.0>,<0.2437.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45626
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2455.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2462.0>},60000]}}
     Offender:   [{pid,<0.2433.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2434.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2459.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2461.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 1
    messages: [{'DOWN',#Ref<0.3771952939.2313682950.129456>,process,<0.2459.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2341.0>,<0.2440.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45625
  neighbours:
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server <0.2437.0> terminating 
** Last message in was {'EXIT',<0.2433.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2455.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2462.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.86>,<<"client 127.0.0.1:59622 -> 127.0.0.1:5672">>,10,<0.2443.0>,131072,<0.2436.0>,undefined,false},<0.2442.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.2433.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2455.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2462.0>},\n                                                       60000]}}"
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server <0.2440.0> terminating 
** Last message in was {'EXIT',<0.2434.0>,{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2459.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2461.0>},60000]}}}
** When Server state == {state,amqp_network_connection,{state,#Port<0.87>,<<"client 127.0.0.1:59623 -> 127.0.0.1:5672">>,10,<0.2447.0>,131072,<0.2439.0>,undefined,false},<0.2446.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]},2047,[{<<"capabilities">>,table,[{<<"publisher_confirms">>,bool,true},{<<"exchange_exchange_bindings">>,bool,true},{<<"basic.nack">>,bool,true},{<<"consumer_cancel_notify">>,bool,true},{<<"connection.blocked">>,bool,true},{<<"consumer_priorities">>,bool,true},{<<"authentication_failure_close">>,bool,true},{<<"per_consumer_qos">>,bool,true},{<<"direct_reply_to">>,bool,true}]},{<<"cluster_name">>,longstr,<<"rabbit@macbook">>},{<<"copyright">>,longstr,<<"Copyright (c) 2007-2021 VMware, Inc. or its affiliates.">>},{<<"information">>,longstr,<<"Licensed under the MPL 2.0. Website: https://rabbitmq.com">>},{<<"platform">>,longstr,<<"Erlang/OTP 24.0.5">>},{<<"product">>,longstr,<<"RabbitMQ">>},{<<"version">>,longstr,<<"3.8.19">>}],none,false}
** Reason for termination ==
** "stopping because dependent process <0.2434.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2459.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2461.0>},\n                                                       60000]}}"
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.2437.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.2433.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2455.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2462.0>},\n                                                       60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.2435.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.2435.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59622 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28168
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2435.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.2433.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2455.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2462.0>},\n                                                       60000]}}"
     Offender:   [{pid,<0.2437.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2436.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2435.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2437.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2436.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: amqp_gen_connection:init/1
    pid: <0.2440.0>
    registered_name: []
    exception exit: {"stopping because dependent process <0.2434.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2459.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2461.0>},\n                                                       60000]}}",[{gen_server,handle_common_reply,8,[{file,"gen_server.erl"},{line,811}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: [<0.2438.0>,amqp_sup,<0.489.0>]
    message_queue_len: 0
    messages: []
    links: [<0.2438.0>]
    dictionary: [{gen_server_call_timeout,60000},{process_name,{amqp_gen_connection,<<"client 127.0.0.1:59623 -> 127.0.0.1:5672">>}}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 28168
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2459.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2461.0>},60000]}}
     Offender:   [{pid,<0.2434.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2438.0>,amqp_connection_sup}
     Context:    child_terminated
     Reason:     "stopping because dependent process <0.2434.0> died: {{shutdown,\n                                                      {server_initiated_close,\n                                                       404,\n                                                       <<\"NOT_FOUND - no queue 'stock_queue' in vhost '/'\">>}},\n                                                     {gen_server,call,\n                                                      [<0.2459.0>,\n                                                       {subscribe,\n                                                        {'basic.consume',0,\n                                                         <<\"stock_queue\">>,\n                                                         <<>>,false,false,\n                                                         false,false,[]},\n                                                        <0.2461.0>},\n                                                       60000]}}"
     Offender:   [{pid,<0.2440.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2439.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {<0.2438.0>,amqp_connection_sup}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2440.0>},{id,connection},{mfargs,{amqp_gen_connection,start_link,[<0.2439.0>,{amqp_params_network,<<"guest">>,{plaintext,<<"guest">>},<<"/">>,"localhost",5672,0,0,10,50000,none,[fun amqp_auth_mechanisms:plain/3,fun amqp_auth_mechanisms:amqplain/3],[],[]}]}},{restart_type,intrinsic},{shutdown,brutal_kill},{child_type,worker}]

2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[211975230942879265|148303169627287476]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2485.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2492.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {connect,no_init_client}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[275715715663373825|228697863115622650]}}},type => rand_exp},channel => nil,channel_ref => nil,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"stock_queue">>},consumer_tag => nil,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"stock_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2489.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2491.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2463.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2489.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2491.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682945.138847>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682945.138847>},{ask,10}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682945.138849>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682945.138849>},{ask,10}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138851>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138851>},{ask,10}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138853>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138853>},{ask,10}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682945.138855>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682945.138855>},{ask,10}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138857>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138857>},{ask,10}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682949.130998>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682949.130998>},{ask,10}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682951.127683>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682951.127683>},{ask,10}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682951.127685>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682951.127685>},{ask,10}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.131000>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.131000>},{ask,10}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682951.127687>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682951.127687>},{ask,10}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682949.131002>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682949.131002>},{ask,10}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682951.127689>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682951.127689>},{ask,10}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.131004>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.131004>},{ask,10}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682951.127691>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682951.127691>},{ask,10}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.131006>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.131006>},{ask,10}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682951.127693>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682951.127693>},{ask,10}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.131008>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.131008>},{ask,10}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682951.127695>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682951.127695>},{ask,10}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682949.131014>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682951.127699>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682949.131014>},{ask,10}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682951.127699>},{ask,10}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682949.131015>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682949.131015>},{ask,10}},{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682951.127700>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682951.127700>},{ask,10}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682949.131016>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682949.131016>},{ask,10}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682951.127701>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682951.127701>},{ask,10}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682949.131017>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682949.131017>},{ask,10}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682951.127702>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682951.127702>},{ask,10}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682949.131018>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682950.129719>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682949.131018>},{ask,10}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682951.127703>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682951.127703>},{ask,10}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682950.129719>},{ask,10}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682949.131019>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682951.127704>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682951.127704>},{ask,10}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682949.131019>},{ask,10}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682952.126057>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682952.126057>},{ask,10}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682952.126059>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682952.126059>},{ask,10}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682952.126061>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682952.126061>},{ask,10}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682952.126063>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682952.126063>},{ask,10}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682952.126065>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682952.126065>},{ask,10}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682952.126067>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682950.129720>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682952.126067>},{ask,10}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682950.129720>},{ask,10}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682950.129721>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682950.129721>},{ask,10}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682952.126069>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682952.126069>},{ask,10}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682950.129723>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682950.129723>},{ask,10}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682952.126071>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682952.126071>},{ask,10}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682950.129725>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682950.129725>},{ask,10}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682952.126073>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682952.126073>},{ask,10}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682950.129727>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682950.129727>},{ask,10}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682950.129729>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682950.129729>},{ask,10}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682952.126075>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682952.126075>},{ask,10}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682952.126076>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682952.126076>},{ask,10}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682952.126077>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682952.126077>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682950.129733>,process,<0.2489.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2341.0>,<0.2467.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 45779
  neighbours:
2021-08-07 17:45:30 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.2464.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception exit: {{{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2485.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2492.0>},60000]}},[{gen_server,call,3,[{file,"gen_server.erl"},{line,247}]},{'Elixir.AMQP.Basic',consume,4,[{file,"lib/amqp/basic.ex"},{line,375}]},{'Elixir.BroadwayRabbitMQ.AmqpClient',consume,2,[{file,"lib/broadway_rabbitmq/amqp_client.ex"},{line,320}]},{'Elixir.BroadwayRabbitMQ.Producer',connect,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,574}]},{'Elixir.BroadwayRabbitMQ.Producer',handle_info,2,[{file,"lib/broadway_rabbitmq/producer.ex"},{line,428}]},{'Elixir.Broadway.Topology.ProducerStage',handle_info,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,228}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.500.0>]
    message_queue_len: 101
    messages: [{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682945.138848>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,3},{max_demand,10}]}},{'$gen_producer',{<0.2351.0>,#Ref<0.3771952939.2313682945.138848>},{ask,10}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682945.138850>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,7},{max_demand,10}]}},{'$gen_producer',{<0.2355.0>,#Ref<0.3771952939.2313682945.138850>},{ask,10}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138852>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,10},{max_demand,10}]}},{'$gen_producer',{<0.2358.0>,#Ref<0.3771952939.2313682945.138852>},{ask,10}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138854>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,11},{max_demand,10}]}},{'$gen_producer',{<0.2359.0>,#Ref<0.3771952939.2313682945.138854>},{ask,10}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682945.138856>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,15},{max_demand,10}]}},{'$gen_producer',{<0.2363.0>,#Ref<0.3771952939.2313682945.138856>},{ask,10}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138858>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,44},{max_demand,10}]}},{'$gen_producer',{<0.2401.0>,#Ref<0.3771952939.2313682945.138858>},{ask,10}},{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682945.138859>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,0},{max_demand,10}]}},{'$gen_producer',{<0.2347.0>,#Ref<0.3771952939.2313682945.138859>},{ask,10}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682945.138860>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,1},{max_demand,10}]}},{'$gen_producer',{<0.2349.0>,#Ref<0.3771952939.2313682945.138860>},{ask,10}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682945.138861>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,2},{max_demand,10}]}},{'$gen_producer',{<0.2350.0>,#Ref<0.3771952939.2313682945.138861>},{ask,10}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682945.138862>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,4},{max_demand,10}]}},{'$gen_producer',{<0.2352.0>,#Ref<0.3771952939.2313682945.138862>},{ask,10}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682945.138863>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,5},{max_demand,10}]}},{'$gen_producer',{<0.2353.0>,#Ref<0.3771952939.2313682945.138863>},{ask,10}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682945.138864>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,14},{max_demand,10}]}},{'$gen_producer',{<0.2362.0>,#Ref<0.3771952939.2313682945.138864>},{ask,10}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682945.138865>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,27},{max_demand,10}]}},{'$gen_producer',{<0.2380.0>,#Ref<0.3771952939.2313682945.138865>},{ask,10}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682945.138866>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,31},{max_demand,10}]}},{'$gen_producer',{<0.2386.0>,#Ref<0.3771952939.2313682945.138866>},{ask,10}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682945.138867>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,33},{max_demand,10}]}},{'$gen_producer',{<0.2388.0>,#Ref<0.3771952939.2313682945.138867>},{ask,10}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682945.138868>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,37},{max_demand,10}]}},{'$gen_producer',{<0.2392.0>,#Ref<0.3771952939.2313682945.138868>},{ask,10}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682949.130999>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,6},{max_demand,10}]}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682951.127684>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,8},{max_demand,10}]}},{'$gen_producer',{<0.2354.0>,#Ref<0.3771952939.2313682949.130999>},{ask,10}},{'$gen_producer',{<0.2356.0>,#Ref<0.3771952939.2313682951.127684>},{ask,10}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682951.127686>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,12},{max_demand,10}]}},{'$gen_producer',{<0.2360.0>,#Ref<0.3771952939.2313682951.127686>},{ask,10}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.131001>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,13},{max_demand,10}]}},{'$gen_producer',{<0.2361.0>,#Ref<0.3771952939.2313682949.131001>},{ask,10}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682951.127688>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,17},{max_demand,10}]}},{'$gen_producer',{<0.2367.0>,#Ref<0.3771952939.2313682951.127688>},{ask,10}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682949.131003>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,20},{max_demand,10}]}},{'$gen_producer',{<0.2372.0>,#Ref<0.3771952939.2313682949.131003>},{ask,10}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682951.127690>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,23},{max_demand,10}]}},{'$gen_producer',{<0.2375.0>,#Ref<0.3771952939.2313682951.127690>},{ask,10}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.131005>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,28},{max_demand,10}]}},{'$gen_producer',{<0.2383.0>,#Ref<0.3771952939.2313682949.131005>},{ask,10}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682951.127692>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,35},{max_demand,10}]}},{'$gen_producer',{<0.2390.0>,#Ref<0.3771952939.2313682951.127692>},{ask,10}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.131007>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,36},{max_demand,10}]}},{'$gen_producer',{<0.2391.0>,#Ref<0.3771952939.2313682949.131007>},{ask,10}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682951.127694>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,45},{max_demand,10}]}},{'$gen_producer',{<0.2404.0>,#Ref<0.3771952939.2313682951.127694>},{ask,10}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.131009>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,47},{max_demand,10}]}},{'$gen_producer',{<0.2406.0>,#Ref<0.3771952939.2313682949.131009>},{ask,10}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682949.131010>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,39},{max_demand,10}]}},{'$gen_producer',{<0.2394.0>,#Ref<0.3771952939.2313682949.131010>},{ask,10}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682951.127696>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,48},{max_demand,10}]}},{'$gen_producer',{<0.2407.0>,#Ref<0.3771952939.2313682951.127696>},{ask,10}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682949.131011>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,40},{max_demand,10}]}},{'$gen_producer',{<0.2395.0>,#Ref<0.3771952939.2313682949.131011>},{ask,10}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682951.127697>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,41},{max_demand,10}]}},{'$gen_producer',{<0.2396.0>,#Ref<0.3771952939.2313682951.127697>},{ask,10}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682949.131012>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,42},{max_demand,10}]}},{'$gen_producer',{<0.2397.0>,#Ref<0.3771952939.2313682949.131012>},{ask,10}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682951.127698>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,43},{max_demand,10}]}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682949.131013>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,46},{max_demand,10}]}},{'$gen_producer',{<0.2399.0>,#Ref<0.3771952939.2313682951.127698>},{ask,10}},{'$gen_producer',{<0.2405.0>,#Ref<0.3771952939.2313682949.131013>},{ask,10}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682952.126058>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,9},{max_demand,10}]}},{'$gen_producer',{<0.2357.0>,#Ref<0.3771952939.2313682952.126058>},{ask,10}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682952.126060>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,16},{max_demand,10}]}},{'$gen_producer',{<0.2364.0>,#Ref<0.3771952939.2313682952.126060>},{ask,10}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682952.126062>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,18},{max_demand,10}]}},{'$gen_producer',{<0.2370.0>,#Ref<0.3771952939.2313682952.126062>},{ask,10}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682952.126064>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,19},{max_demand,10}]}},{'$gen_producer',{<0.2371.0>,#Ref<0.3771952939.2313682952.126064>},{ask,10}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682952.126066>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,21},{max_demand,10}]}},{'$gen_producer',{<0.2373.0>,#Ref<0.3771952939.2313682952.126066>},{ask,10}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682952.126068>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,22},{max_demand,10}]}},{'$gen_producer',{<0.2374.0>,#Ref<0.3771952939.2313682952.126068>},{ask,10}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682950.129722>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,34},{max_demand,10}]}},{'$gen_producer',{<0.2389.0>,#Ref<0.3771952939.2313682950.129722>},{ask,10}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682952.126070>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,24},{max_demand,10}]}},{'$gen_producer',{<0.2376.0>,#Ref<0.3771952939.2313682952.126070>},{ask,10}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682950.129724>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,25},{max_demand,10}]}},{'$gen_producer',{<0.2377.0>,#Ref<0.3771952939.2313682950.129724>},{ask,10}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682952.126072>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,29},{max_demand,10}]}},{'$gen_producer',{<0.2384.0>,#Ref<0.3771952939.2313682952.126072>},{ask,10}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682950.129726>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,32},{max_demand,10}]}},{'$gen_producer',{<0.2387.0>,#Ref<0.3771952939.2313682950.129726>},{ask,10}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682952.126074>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,26},{max_demand,10}]}},{'$gen_producer',{<0.2378.0>,#Ref<0.3771952939.2313682952.126074>},{ask,10}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682950.129728>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,38},{max_demand,10}]}},{'$gen_producer',{<0.2393.0>,#Ref<0.3771952939.2313682950.129728>},{ask,10}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682952.126078>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,30},{max_demand,10}]}},{'$gen_producer',{<0.2385.0>,#Ref<0.3771952939.2313682952.126078>},{ask,10}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682952.126079>},{subscribe,nil,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{cancel,temporary},{partition,49},{max_demand,10}]}},{'$gen_producer',{<0.2408.0>,#Ref<0.3771952939.2313682952.126079>},{ask,10}},{'DOWN',#Ref<0.3771952939.2313682945.138872>,process,<0.2485.0>,{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}}}]
    links: [<0.2341.0>,<0.2470.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 46001
  neighbours:
2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {{shutdown,{server_initiated_close,404,<<"NOT_FOUND - no queue 'stock_queue' in vhost '/'">>}},{gen_server,call,[<0.2489.0>,{subscribe,{'basic.consume',0,<<"stock_queue">>,<<>>,false,false,false,false,[]},<0.2491.0>},60000]}}
     Offender:   [{pid,<0.2463.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:45:30 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.2463.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"stock_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-_MbCfZ7rrrLquyNj6W3sQQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => false,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.697.0>,#Ref<0.1523191737.4192468993.99956>},{<0.696.0>,#Ref<0.1523191737.4192468993.99954>},{<0.695.0>,#Ref<0.1523191737.4192468993.99950>},{<0.694.0>,#Ref<0.1523191737.4192468993.99947>},{<0.693.0>,#Ref<0.1523191737.4192468993.99945>},{<0.692.0>,#Ref<0.1523191737.4192468993.99941>},{<0.691.0>,#Ref<0.1523191737.4192468994.97173>},{<0.690.0>,#Ref<0.1523191737.4192468994.97170>},{<0.689.0>,#Ref<0.1523191737.4192468994.97166>},{<0.688.0>,#Ref<0.1523191737.4192468994.97164>},{<0.687.0>,#Ref<0.1523191737.4192468994.97161>},{<0.686.0>,#Ref<0.1523191737.4192468994.97158>},{<0.685.0>,#Ref<0.1523191737.4192468995.97441>},{<0.684.0>,#Ref<0.1523191737.4192468994.97154>},{<0.683.0>,#Ref<0.1523191737.4192468993.99939>},{<0.682.0>,#Ref<0.1523191737.4192468995.97438>},{<0.681.0>,#Ref<0.1523191737.4192468993.99935>},{<0.680.0>,#Ref<0.1523191737.4192468995.97434>},{<0.679.0>,#Ref<0.1523191737.4192468995.97431>},{<0.678.0>,#Ref<0.1523191737.4192468995.97428>},{<0.677.0>,#Ref<0.1523191737.4192468995.97425>},{<0.676.0>,#Ref<0.1523191737.4192468993.99933>},{<0.675.0>,#Ref<0.1523191737.4192468993.99930>},{<0.674.0>,#Ref<0.1523191737.4192468995.97422>},{<0.673.0>,#Ref<0.1523191737.4192468993.99927>},{<0.672.0>,#Ref<0.1523191737.4192468995.97420>},{<0.671.0>,#Ref<0.1523191737.4192468993.99924>},{<0.670.0>,#Ref<0.1523191737.4192468994.97152>},{<0.669.0>,#Ref<0.1523191737.4192468993.99921>},{<0.668.0>,#Ref<0.1523191737.4192468994.97149>},{<0.667.0>,#Ref<0.1523191737.4192468994.97146>},{<0.666.0>,#Ref<0.1523191737.4192468994.97143>},{<0.665.0>,#Ref<0.1523191737.4192468994.97139>},{<0.664.0>,#Ref<0.1523191737.4192468994.97137>},{<0.663.0>,#Ref<0.1523191737.4192468994.97134>},{<0.662.0>,#Ref<0.1523191737.4192468994.97131>},{<0.661.0>,#Ref<0.1523191737.4192468994.97128>},{<0.660.0>,#Ref<0.1523191737.4192468994.97125>},{<0.659.0>,#Ref<0.1523191737.4192468994.97121>},{<0.658.0>,#Ref<0.1523191737.4192468994.97119>},{<0.657.0>,#Ref<0.1523191737.4192468994.97116>},{<0.656.0>,#Ref<0.1523191737.4192468994.97112>},{<0.655.0>,#Ref<0.1523191737.4192468994.97109>},{<0.654.0>,#Ref<0.1523191737.4192468994.97107>},{<0.653.0>,#Ref<0.1523191737.4192468994.97104>},{<0.652.0>,#Ref<0.1523191737.4192468995.97417>},{<0.651.0>,#Ref<0.1523191737.4192468994.97100>},{<0.650.0>,#Ref<0.1523191737.4192468994.97098>},{<0.649.0>,#Ref<0.1523191737.4192468995.97414>},{<0.648.0>,#Ref<0.1523191737.4192468994.97095>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[214473790913197159|73876221399524767]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.713.0>},custom_consumer => nil,pid => <0.730.0>},channel_ref => #Ref<0.1523191737.4192468995.97570>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-_MbCfZ7rrrLquyNj6W3sQQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,wake_up,3,[{file,"proc_lib.erl"},{line,236}]}]}
2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-hKjStxJwkVyrShwoh8EstQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.697.0>,#Ref<0.1523191737.4192468993.99957>},{<0.696.0>,#Ref<0.1523191737.4192468993.99953>},{<0.695.0>,#Ref<0.1523191737.4192468993.99951>},{<0.694.0>,#Ref<0.1523191737.4192468993.99948>},{<0.693.0>,#Ref<0.1523191737.4192468993.99944>},{<0.692.0>,#Ref<0.1523191737.4192468993.99942>},{<0.691.0>,#Ref<0.1523191737.4192468994.97172>},{<0.690.0>,#Ref<0.1523191737.4192468994.97169>},{<0.689.0>,#Ref<0.1523191737.4192468994.97167>},{<0.688.0>,#Ref<0.1523191737.4192468994.97163>},{<0.687.0>,#Ref<0.1523191737.4192468994.97160>},{<0.686.0>,#Ref<0.1523191737.4192468994.97157>},{<0.685.0>,#Ref<0.1523191737.4192468995.97440>},{<0.684.0>,#Ref<0.1523191737.4192468994.97155>},{<0.683.0>,#Ref<0.1523191737.4192468993.99938>},{<0.682.0>,#Ref<0.1523191737.4192468995.97437>},{<0.681.0>,#Ref<0.1523191737.4192468993.99936>},{<0.680.0>,#Ref<0.1523191737.4192468995.97435>},{<0.679.0>,#Ref<0.1523191737.4192468995.97432>},{<0.678.0>,#Ref<0.1523191737.4192468995.97429>},{<0.677.0>,#Ref<0.1523191737.4192468995.97426>},{<0.676.0>,#Ref<0.1523191737.4192468993.99932>},{<0.675.0>,#Ref<0.1523191737.4192468993.99929>},{<0.674.0>,#Ref<0.1523191737.4192468995.97423>},{<0.673.0>,#Ref<0.1523191737.4192468993.99926>},{<0.672.0>,#Ref<0.1523191737.4192468995.97419>},{<0.671.0>,#Ref<0.1523191737.4192468993.99923>},{<0.670.0>,#Ref<0.1523191737.4192468994.97151>},{<0.669.0>,#Ref<0.1523191737.4192468993.99920>},{<0.668.0>,#Ref<0.1523191737.4192468994.97148>},{<0.667.0>,#Ref<0.1523191737.4192468994.97145>},{<0.666.0>,#Ref<0.1523191737.4192468994.97142>},{<0.665.0>,#Ref<0.1523191737.4192468994.97140>},{<0.664.0>,#Ref<0.1523191737.4192468994.97136>},{<0.663.0>,#Ref<0.1523191737.4192468994.97133>},{<0.662.0>,#Ref<0.1523191737.4192468994.97130>},{<0.661.0>,#Ref<0.1523191737.4192468994.97127>},{<0.660.0>,#Ref<0.1523191737.4192468994.97124>},{<0.659.0>,#Ref<0.1523191737.4192468994.97122>},{<0.658.0>,#Ref<0.1523191737.4192468994.97118>},{<0.657.0>,#Ref<0.1523191737.4192468994.97115>},{<0.656.0>,#Ref<0.1523191737.4192468994.97113>},{<0.655.0>,#Ref<0.1523191737.4192468994.97110>},{<0.654.0>,#Ref<0.1523191737.4192468994.97106>},{<0.653.0>,#Ref<0.1523191737.4192468994.97103>},{<0.652.0>,#Ref<0.1523191737.4192468995.97416>},{<0.651.0>,#Ref<0.1523191737.4192468994.97101>},{<0.650.0>,#Ref<0.1523191737.4192468994.97097>},{<0.649.0>,#Ref<0.1523191737.4192468995.97413>},{<0.648.0>,#Ref<0.1523191737.4192468994.97094>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[163552317677063861|124567089591599888]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.710.0>},custom_consumer => nil,pid => <0.731.0>},channel_ref => #Ref<0.1523191737.4192468995.97568>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-hKjStxJwkVyrShwoh8EstQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,wake_up,3,[{file,"proc_lib.erl"},{line,236}]}]}
2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.645.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,wake_up,3,[{file,"proc_lib.erl"},{line,236}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 2
    messages: [{'DOWN',#Ref<0.1523191737.4192468995.97570>,process,<0.730.0>,normal},{'EXIT',<0.713.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 70707
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,wake_up,3,[{file,"proc_lib.erl"},{line,236}]}]}
     Offender:   [{pid,<0.645.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.646.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,wake_up,3,[{file,"proc_lib.erl"},{line,236}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 2
    messages: [{'DOWN',#Ref<0.1523191737.4192468995.97568>,process,<0.731.0>,normal},{'EXIT',<0.710.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 66836
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,wake_up,3,[{file,"proc_lib.erl"},{line,236}]}]}
     Offender:   [{pid,<0.646.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-daAJJ7AuNPVrkrjhoSkMrg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[215308225291239888|217062825688732431]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.814.0>},custom_consumer => nil,pid => <0.832.0>},channel_ref => #Ref<0.1523191737.4192468996.100489>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-daAJJ7AuNPVrkrjhoSkMrg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-G9Wwd0lJDyV4eyFbkzut2w">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[184064093386903814|32173187108902789]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.817.0>},custom_consumer => nil,pid => <0.836.0>},channel_ref => #Ref<0.1523191737.4192468997.96223>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-G9Wwd0lJDyV4eyFbkzut2w">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.809.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-daAJJ7AuNPVrkrjhoSkMrg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468996.100489>,process,<0.832.0>,normal},{'EXIT',<0.814.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52079
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.809.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.811.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-G9Wwd0lJDyV4eyFbkzut2w">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468997.96223>,process,<0.836.0>,normal},{'EXIT',<0.817.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52059
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.811.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-smruKypexTRw3CINmEOBxg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[178220105875283860|182055182628283218]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.850.0>},custom_consumer => nil,pid => <0.868.0>},channel_ref => #Ref<0.1523191737.4192468993.100881>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-smruKypexTRw3CINmEOBxg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Tk0QUw02cU1eenBd-oH5Xg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[184983523992216105|31122990044516615]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.846.0>},custom_consumer => nil,pid => <0.864.0>},channel_ref => #Ref<0.1523191737.4192468994.97558>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-Tk0QUw02cU1eenBd-oH5Xg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.843.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-smruKypexTRw3CINmEOBxg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468993.100881>,process,<0.868.0>,normal},{'EXIT',<0.850.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52034
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.843.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.843.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.842.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Tk0QUw02cU1eenBd-oH5Xg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468994.97558>,process,<0.864.0>,normal},{'EXIT',<0.846.0>,{shutdown,normal}},{'EXIT',<0.644.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 2586
    stack_size: 28
    reductions: 47956
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.842.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.644.0>},{id,#Ref<0.1523191737.4192468996.99510>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-mc-W0FWMgVfb4hToV6ehAw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.939.0>,#Ref<0.1523191737.4192468999.96944>},{<0.938.0>,#Ref<0.1523191737.4192468995.99764>},{<0.937.0>,#Ref<0.1523191737.4192468995.99762>},{<0.936.0>,#Ref<0.1523191737.4192468995.99758>},{<0.935.0>,#Ref<0.1523191737.4192468995.99756>},{<0.934.0>,#Ref<0.1523191737.4192468995.99752>},{<0.933.0>,#Ref<0.1523191737.4192468995.99749>},{<0.932.0>,#Ref<0.1523191737.4192468995.99747>},{<0.931.0>,#Ref<0.1523191737.4192468995.99743>},{<0.930.0>,#Ref<0.1523191737.4192468999.96941>},{<0.929.0>,#Ref<0.1523191737.4192468995.99740>},{<0.928.0>,#Ref<0.1523191737.4192468999.96939>},{<0.927.0>,#Ref<0.1523191737.4192468995.99737>},{<0.926.0>,#Ref<0.1523191737.4192468999.96935>},{<0.925.0>,#Ref<0.1523191737.4192468997.96499>},{<0.924.0>,#Ref<0.1523191737.4192468999.96932>},{<0.922.0>,#Ref<0.1523191737.4192468999.96930>},{<0.919.0>,#Ref<0.1523191737.4192468999.96927>},{<0.917.0>,#Ref<0.1523191737.4192468999.96923>},{<0.916.0>,#Ref<0.1523191737.4192468993.101043>},{<0.915.0>,#Ref<0.1523191737.4192468995.99735>},{<0.914.0>,#Ref<0.1523191737.4192468993.101040>},{<0.913.0>,#Ref<0.1523191737.4192468995.99731>},{<0.912.0>,#Ref<0.1523191737.4192468995.99729>},{<0.911.0>,#Ref<0.1523191737.4192468995.99726>},{<0.910.0>,#Ref<0.1523191737.4192468995.99722>},{<0.909.0>,#Ref<0.1523191737.4192468995.99720>},{<0.908.0>,#Ref<0.1523191737.4192468995.99716>},{<0.907.0>,#Ref<0.1523191737.4192468997.96487>},{<0.906.0>,#Ref<0.1523191737.4192468997.96485>},{<0.905.0>,#Ref<0.1523191737.4192468997.96482>},{<0.903.0>,#Ref<0.1523191737.4192468995.99713>},{<0.900.0>,#Ref<0.1523191737.4192468995.99710>},{<0.895.0>,#Ref<0.1523191737.4192468999.96920>},{<0.894.0>,#Ref<0.1523191737.4192468993.101030>},{<0.893.0>,#Ref<0.1523191737.4192468993.101028>},{<0.892.0>,#Ref<0.1523191737.4192468993.101024>},{<0.891.0>,#Ref<0.1523191737.4192468993.101022>},{<0.890.0>,#Ref<0.1523191737.4192468997.96469>},{<0.889.0>,#Ref<0.1523191737.4192468997.96466>},{<0.888.0>,#Ref<0.1523191737.4192468997.96463>},{<0.887.0>,#Ref<0.1523191737.4192468997.96460>},{<0.886.0>,#Ref<0.1523191737.4192468993.101017>},{<0.885.0>,#Ref<0.1523191737.4192468997.96456>},{<0.884.0>,#Ref<0.1523191737.4192468999.96854>},{<0.883.0>,#Ref<0.1523191737.4192468999.96851>},{<0.882.0>,#Ref<0.1523191737.4192468999.96848>},{<0.881.0>,#Ref<0.1523191737.4192468999.96846>},{<0.880.0>,#Ref<0.1523191737.4192468999.96843>},{<0.879.0>,#Ref<0.1523191737.4192468999.96839>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[277331842407903001|227053488372236745]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.899.0>},custom_consumer => nil,pid => <0.959.0>},channel_ref => #Ref<0.1523191737.4192468999.96984>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-mc-W0FWMgVfb4hToV6ehAw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-XfXvMe3rT6sJCrCQrBHQ2A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.939.0>,#Ref<0.1523191737.4192468999.96945>},{<0.938.0>,#Ref<0.1523191737.4192468995.99765>},{<0.937.0>,#Ref<0.1523191737.4192468995.99761>},{<0.936.0>,#Ref<0.1523191737.4192468995.99759>},{<0.935.0>,#Ref<0.1523191737.4192468995.99755>},{<0.934.0>,#Ref<0.1523191737.4192468995.99753>},{<0.933.0>,#Ref<0.1523191737.4192468995.99750>},{<0.932.0>,#Ref<0.1523191737.4192468995.99746>},{<0.931.0>,#Ref<0.1523191737.4192468995.99744>},{<0.930.0>,#Ref<0.1523191737.4192468999.96942>},{<0.929.0>,#Ref<0.1523191737.4192468995.99741>},{<0.928.0>,#Ref<0.1523191737.4192468999.96938>},{<0.927.0>,#Ref<0.1523191737.4192468995.99738>},{<0.926.0>,#Ref<0.1523191737.4192468999.96936>},{<0.925.0>,#Ref<0.1523191737.4192468997.96498>},{<0.924.0>,#Ref<0.1523191737.4192468999.96933>},{<0.922.0>,#Ref<0.1523191737.4192468999.96929>},{<0.919.0>,#Ref<0.1523191737.4192468999.96926>},{<0.917.0>,#Ref<0.1523191737.4192468999.96924>},{<0.916.0>,#Ref<0.1523191737.4192468993.101042>},{<0.915.0>,#Ref<0.1523191737.4192468995.99734>},{<0.914.0>,#Ref<0.1523191737.4192468993.101039>},{<0.913.0>,#Ref<0.1523191737.4192468995.99732>},{<0.912.0>,#Ref<0.1523191737.4192468995.99728>},{<0.911.0>,#Ref<0.1523191737.4192468995.99725>},{<0.910.0>,#Ref<0.1523191737.4192468995.99723>},{<0.909.0>,#Ref<0.1523191737.4192468995.99719>},{<0.908.0>,#Ref<0.1523191737.4192468995.99717>},{<0.907.0>,#Ref<0.1523191737.4192468997.96488>},{<0.906.0>,#Ref<0.1523191737.4192468997.96484>},{<0.905.0>,#Ref<0.1523191737.4192468997.96481>},{<0.903.0>,#Ref<0.1523191737.4192468995.99714>},{<0.900.0>,#Ref<0.1523191737.4192468995.99711>},{<0.895.0>,#Ref<0.1523191737.4192468999.96921>},{<0.894.0>,#Ref<0.1523191737.4192468993.101031>},{<0.893.0>,#Ref<0.1523191737.4192468993.101027>},{<0.892.0>,#Ref<0.1523191737.4192468993.101025>},{<0.891.0>,#Ref<0.1523191737.4192468993.101021>},{<0.890.0>,#Ref<0.1523191737.4192468997.96468>},{<0.889.0>,#Ref<0.1523191737.4192468997.96465>},{<0.888.0>,#Ref<0.1523191737.4192468997.96462>},{<0.887.0>,#Ref<0.1523191737.4192468997.96459>},{<0.886.0>,#Ref<0.1523191737.4192468993.101016>},{<0.885.0>,#Ref<0.1523191737.4192468997.96457>},{<0.884.0>,#Ref<0.1523191737.4192468999.96855>},{<0.883.0>,#Ref<0.1523191737.4192468999.96852>},{<0.882.0>,#Ref<0.1523191737.4192468999.96849>},{<0.881.0>,#Ref<0.1523191737.4192468999.96845>},{<0.880.0>,#Ref<0.1523191737.4192468999.96842>},{<0.879.0>,#Ref<0.1523191737.4192468999.96840>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[102987263339311582|257341223171737018]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.878.0>},custom_consumer => nil,pid => <0.958.0>},channel_ref => #Ref<0.1523191737.4192468995.99845>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-XfXvMe3rT6sJCrCQrBHQ2A">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.874.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-mc-W0FWMgVfb4hToV6ehAw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468999.96984>,process,<0.959.0>,normal},{'EXIT',<0.899.0>,{shutdown,normal}}]
    links: [<0.872.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 69263
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.874.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.873.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-XfXvMe3rT6sJCrCQrBHQ2A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468995.99845>,process,<0.958.0>,normal},{'EXIT',<0.878.0>,{shutdown,normal}}]
    links: [<0.872.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 69022
  neighbours:
2021-08-07 17:47:08 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.873.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:08 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-6_cX5mNLFxDnV3TpkikNWQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[156341276861831868|276034042312401346]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.968.0>},custom_consumer => nil,pid => <0.987.0>},channel_ref => #Ref<0.1523191737.4192469000.97283>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-6_cX5mNLFxDnV3TpkikNWQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.964.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-6_cX5mNLFxDnV3TpkikNWQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192469000.97283>,process,<0.987.0>,normal},{'EXIT',<0.968.0>,{shutdown,normal}}]
    links: [<0.872.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52054
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.964.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-EJhSOBlf1hHfnr2mr_LgBA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[218083764496343157|142263941832215372]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.971.0>},custom_consumer => nil,pid => <0.991.0>},channel_ref => #Ref<0.1523191737.4192468997.96629>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-EJhSOBlf1hHfnr2mr_LgBA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.965.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-EJhSOBlf1hHfnr2mr_LgBA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468997.96629>,process,<0.991.0>,normal},{'EXIT',<0.971.0>,{shutdown,normal}}]
    links: [<0.872.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52038
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.965.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-01SwwhKckL-wSkKGwFBo-Q">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[288158911988084488|69301613064273]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1002.0>},custom_consumer => nil,pid => <0.1019.0>},channel_ref => #Ref<0.1523191737.4192468998.97070>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-01SwwhKckL-wSkKGwFBo-Q">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-jeMOu03IqWOKkL-9vNVdiw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[170747138398517527|117409974172177439]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.999.0>},custom_consumer => nil,pid => <0.1021.0>},channel_ref => #Ref<0.1523191737.4192468996.100769>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-jeMOu03IqWOKkL-9vNVdiw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.995.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-jeMOu03IqWOKkL-9vNVdiw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468996.100769>,process,<0.1021.0>,normal},{'EXIT',<0.999.0>,{shutdown,normal}}]
    links: [<0.872.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52154
  neighbours:
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.996.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-01SwwhKckL-wSkKGwFBo-Q">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468998.97070>,process,<0.1019.0>,normal},{'EXIT',<0.1002.0>,{shutdown,normal}}]
    links: [<0.872.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52147
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.995.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.995.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.996.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.872.0>},{id,#Ref<0.1523191737.4192468996.99510>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-vX4PxgIi7EEHqmA3sXVGbw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1092.0>,#Ref<0.1523191737.4192469000.97582>},{<0.1091.0>,#Ref<0.1523191737.4192469000.97580>},{<0.1090.0>,#Ref<0.1523191737.4192469000.97577>},{<0.1089.0>,#Ref<0.1523191737.4192469000.97574>},{<0.1088.0>,#Ref<0.1523191737.4192469000.97570>},{<0.1087.0>,#Ref<0.1523191737.4192469000.97568>},{<0.1086.0>,#Ref<0.1523191737.4192469000.97564>},{<0.1085.0>,#Ref<0.1523191737.4192468999.97224>},{<0.1082.0>,#Ref<0.1523191737.4192468999.97221>},{<0.1079.0>,#Ref<0.1523191737.4192468999.97219>},{<0.1078.0>,#Ref<0.1523191737.4192468999.97215>},{<0.1077.0>,#Ref<0.1523191737.4192468999.97213>},{<0.1076.0>,#Ref<0.1523191737.4192469000.97561>},{<0.1075.0>,#Ref<0.1523191737.4192469000.97559>},{<0.1074.0>,#Ref<0.1523191737.4192469000.97556>},{<0.1073.0>,#Ref<0.1523191737.4192469000.97552>},{<0.1072.0>,#Ref<0.1523191737.4192469000.97550>},{<0.1071.0>,#Ref<0.1523191737.4192468999.97208>},{<0.1069.0>,#Ref<0.1523191737.4192468999.97205>},{<0.1067.0>,#Ref<0.1523191737.4192468999.97201>},{<0.1065.0>,#Ref<0.1523191737.4192468999.97198>},{<0.1063.0>,#Ref<0.1523191737.4192468999.97195>},{<0.1062.0>,#Ref<0.1523191737.4192468999.97192>},{<0.1061.0>,#Ref<0.1523191737.4192468999.97190>},{<0.1060.0>,#Ref<0.1523191737.4192468999.97186>},{<0.1059.0>,#Ref<0.1523191737.4192468999.97184>},{<0.1058.0>,#Ref<0.1523191737.4192468995.100099>},{<0.1056.0>,#Ref<0.1523191737.4192468995.100096>},{<0.1053.0>,#Ref<0.1523191737.4192468995.100093>},{<0.1052.0>,#Ref<0.1523191737.4192468997.96985>},{<0.1051.0>,#Ref<0.1523191737.4192468997.96982>},{<0.1050.0>,#Ref<0.1523191737.4192468997.96980>},{<0.1049.0>,#Ref<0.1523191737.4192468997.96976>},{<0.1048.0>,#Ref<0.1523191737.4192468997.96973>},{<0.1047.0>,#Ref<0.1523191737.4192468997.96971>},{<0.1046.0>,#Ref<0.1523191737.4192468997.96967>},{<0.1045.0>,#Ref<0.1523191737.4192468997.96965>},{<0.1044.0>,#Ref<0.1523191737.4192468997.96962>},{<0.1043.0>,#Ref<0.1523191737.4192468997.96959>},{<0.1042.0>,#Ref<0.1523191737.4192468997.96955>},{<0.1041.0>,#Ref<0.1523191737.4192468997.96953>},{<0.1040.0>,#Ref<0.1523191737.4192468997.96949>},{<0.1039.0>,#Ref<0.1523191737.4192468997.96946>},{<0.1038.0>,#Ref<0.1523191737.4192468999.97116>},{<0.1037.0>,#Ref<0.1523191737.4192468997.96939>},{<0.1036.0>,#Ref<0.1523191737.4192468997.96936>},{<0.1035.0>,#Ref<0.1523191737.4192468999.97112>},{<0.1033.0>,#Ref<0.1523191737.4192468997.96933>},{<0.1030.0>,#Ref<0.1523191737.4192468997.96929>},{<0.1029.0>,#Ref<0.1523191737.4192468997.96924>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[17106561116851567|54931151397811003]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1034.0>},custom_consumer => nil,pid => <0.1110.0>},channel_ref => #Ref<0.1523191737.4192468997.97033>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-vX4PxgIi7EEHqmA3sXVGbw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-hwOt-QhzijFC4IENsAJXFQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1092.0>,#Ref<0.1523191737.4192469000.97583>},{<0.1091.0>,#Ref<0.1523191737.4192469000.97579>},{<0.1090.0>,#Ref<0.1523191737.4192469000.97576>},{<0.1089.0>,#Ref<0.1523191737.4192469000.97573>},{<0.1088.0>,#Ref<0.1523191737.4192469000.97571>},{<0.1087.0>,#Ref<0.1523191737.4192469000.97567>},{<0.1086.0>,#Ref<0.1523191737.4192469000.97565>},{<0.1085.0>,#Ref<0.1523191737.4192468999.97225>},{<0.1082.0>,#Ref<0.1523191737.4192468999.97222>},{<0.1079.0>,#Ref<0.1523191737.4192468999.97218>},{<0.1078.0>,#Ref<0.1523191737.4192468999.97216>},{<0.1077.0>,#Ref<0.1523191737.4192468999.97212>},{<0.1076.0>,#Ref<0.1523191737.4192469000.97562>},{<0.1075.0>,#Ref<0.1523191737.4192469000.97558>},{<0.1074.0>,#Ref<0.1523191737.4192469000.97555>},{<0.1073.0>,#Ref<0.1523191737.4192469000.97553>},{<0.1072.0>,#Ref<0.1523191737.4192469000.97549>},{<0.1071.0>,#Ref<0.1523191737.4192468999.97207>},{<0.1069.0>,#Ref<0.1523191737.4192468999.97204>},{<0.1067.0>,#Ref<0.1523191737.4192468999.97202>},{<0.1065.0>,#Ref<0.1523191737.4192468999.97199>},{<0.1063.0>,#Ref<0.1523191737.4192468999.97196>},{<0.1062.0>,#Ref<0.1523191737.4192468999.97193>},{<0.1061.0>,#Ref<0.1523191737.4192468999.97189>},{<0.1060.0>,#Ref<0.1523191737.4192468999.97187>},{<0.1059.0>,#Ref<0.1523191737.4192468999.97183>},{<0.1058.0>,#Ref<0.1523191737.4192468995.100098>},{<0.1056.0>,#Ref<0.1523191737.4192468995.100095>},{<0.1053.0>,#Ref<0.1523191737.4192468995.100092>},{<0.1052.0>,#Ref<0.1523191737.4192468997.96986>},{<0.1051.0>,#Ref<0.1523191737.4192468997.96983>},{<0.1050.0>,#Ref<0.1523191737.4192468997.96979>},{<0.1049.0>,#Ref<0.1523191737.4192468997.96977>},{<0.1048.0>,#Ref<0.1523191737.4192468997.96974>},{<0.1047.0>,#Ref<0.1523191737.4192468997.96970>},{<0.1046.0>,#Ref<0.1523191737.4192468997.96968>},{<0.1045.0>,#Ref<0.1523191737.4192468997.96964>},{<0.1044.0>,#Ref<0.1523191737.4192468997.96961>},{<0.1043.0>,#Ref<0.1523191737.4192468997.96958>},{<0.1042.0>,#Ref<0.1523191737.4192468997.96956>},{<0.1041.0>,#Ref<0.1523191737.4192468997.96952>},{<0.1040.0>,#Ref<0.1523191737.4192468997.96950>},{<0.1039.0>,#Ref<0.1523191737.4192468997.96947>},{<0.1038.0>,#Ref<0.1523191737.4192468999.97117>},{<0.1037.0>,#Ref<0.1523191737.4192468997.96940>},{<0.1036.0>,#Ref<0.1523191737.4192468997.96937>},{<0.1035.0>,#Ref<0.1523191737.4192468999.97111>},{<0.1033.0>,#Ref<0.1523191737.4192468997.96932>},{<0.1030.0>,#Ref<0.1523191737.4192468997.96930>},{<0.1029.0>,#Ref<0.1523191737.4192468997.96925>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[83407205527558846|132768570365488320]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1057.0>},custom_consumer => nil,pid => <0.1113.0>},channel_ref => #Ref<0.1523191737.4192469000.97665>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-hwOt-QhzijFC4IENsAJXFQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1026.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-vX4PxgIi7EEHqmA3sXVGbw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468997.97033>,process,<0.1110.0>,normal},{'EXIT',<0.1034.0>,{shutdown,normal}}]
    links: [<0.1025.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65590
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1026.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1027.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-hwOt-QhzijFC4IENsAJXFQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192469000.97665>,process,<0.1113.0>,normal},{'EXIT',<0.1057.0>,{shutdown,normal}}]
    links: [<0.1025.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 69257
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1027.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-0YyXeJKHMyrr-HmTt_Suzg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[26123918993134899|117955296585144784]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1124.0>},custom_consumer => nil,pid => <0.1143.0>},channel_ref => #Ref<0.1523191737.4192469000.97773>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-0YyXeJKHMyrr-HmTt_Suzg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-x4JzlLLdcQD13qMNOAu-7Q">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[152859353559383554|279452700858569198]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1121.0>},custom_consumer => nil,pid => <0.1139.0>},channel_ref => #Ref<0.1523191737.4192468998.97733>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-x4JzlLLdcQD13qMNOAu-7Q">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1118.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-0YyXeJKHMyrr-HmTt_Suzg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192469000.97773>,process,<0.1143.0>,normal},{'EXIT',<0.1124.0>,{shutdown,normal}}]
    links: [<0.1025.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52097
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1118.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1117.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-x4JzlLLdcQD13qMNOAu-7Q">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468998.97733>,process,<0.1139.0>,normal},{'EXIT',<0.1121.0>,{shutdown,normal}}]
    links: [<0.1025.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52097
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1117.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-gvEpM-gBQSAGe5__vX-czQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[124670272658193224|91488291266840823]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1151.0>},custom_consumer => nil,pid => <0.1170.0>},channel_ref => #Ref<0.1523191737.4192469000.98157>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-gvEpM-gBQSAGe5__vX-czQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1147.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-gvEpM-gBQSAGe5__vX-czQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192469000.98157>,process,<0.1170.0>,normal},{'EXIT',<0.1151.0>,{shutdown,normal}}]
    links: [<0.1025.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52102
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1147.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.1147.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-faedPFgKGRkdHm5pjuOLsg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[42033419128436678|30038641797107077]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1159.0>},custom_consumer => nil,pid => <0.1174.0>},channel_ref => #Ref<0.1523191737.4192469000.98170>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-faedPFgKGRkdHm5pjuOLsg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:09 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1148.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-faedPFgKGRkdHm5pjuOLsg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192469000.98170>,process,<0.1174.0>,normal},{'EXIT',<0.1025.0>,shutdown},{'EXIT',<0.1159.0>,{shutdown,normal}}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52108
  neighbours:
2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1148.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:09 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.1025.0>},{id,#Ref<0.1523191737.4192468996.99510>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:47:09 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-snyiYFps1vaWzWbJtP-7Mg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1241.0>,#Ref<0.1523191737.4192468995.100653>},{<0.1240.0>,#Ref<0.1523191737.4192468995.100651>},{<0.1239.0>,#Ref<0.1523191737.4192468995.100648>},{<0.1238.0>,#Ref<0.1523191737.4192468995.100645>},{<0.1237.0>,#Ref<0.1523191737.4192468995.100641>},{<0.1236.0>,#Ref<0.1523191737.4192468995.100639>},{<0.1235.0>,#Ref<0.1523191737.4192468995.100635>},{<0.1234.0>,#Ref<0.1523191737.4192468996.101328>},{<0.1233.0>,#Ref<0.1523191737.4192468996.101324>},{<0.1232.0>,#Ref<0.1523191737.4192468996.101321>},{<0.1231.0>,#Ref<0.1523191737.4192468996.101319>},{<0.1230.0>,#Ref<0.1523191737.4192468996.101316>},{<0.1229.0>,#Ref<0.1523191737.4192468996.101313>},{<0.1228.0>,#Ref<0.1523191737.4192468996.101309>},{<0.1227.0>,#Ref<0.1523191737.4192468996.101306>},{<0.1226.0>,#Ref<0.1523191737.4192468996.101304>},{<0.1225.0>,#Ref<0.1523191737.4192468996.101300>},{<0.1224.0>,#Ref<0.1523191737.4192468996.101297>},{<0.1223.0>,#Ref<0.1523191737.4192468997.97256>},{<0.1222.0>,#Ref<0.1523191737.4192468996.101294>},{<0.1221.0>,#Ref<0.1523191737.4192468997.97250>},{<0.1218.0>,#Ref<0.1523191737.4192468995.100632>},{<0.1216.0>,#Ref<0.1523191737.4192468997.97246>},{<0.1215.0>,#Ref<0.1523191737.4192468997.97244>},{<0.1214.0>,#Ref<0.1523191737.4192468996.101290>},{<0.1213.0>,#Ref<0.1523191737.4192468997.97240>},{<0.1212.0>,#Ref<0.1523191737.4192468996.101286>},{<0.1211.0>,#Ref<0.1523191737.4192468996.101283>},{<0.1210.0>,#Ref<0.1523191737.4192468995.100607>},{<0.1209.0>,#Ref<0.1523191737.4192468996.101279>},{<0.1208.0>,#Ref<0.1523191737.4192468996.101276>},{<0.1207.0>,#Ref<0.1523191737.4192468997.97236>},{<0.1205.0>,#Ref<0.1523191737.4192468997.97233>},{<0.1203.0>,#Ref<0.1523191737.4192468997.97229>},{<0.1202.0>,#Ref<0.1523191737.4192468997.97227>},{<0.1199.0>,#Ref<0.1523191737.4192468997.97223>},{<0.1198.0>,#Ref<0.1523191737.4192468996.101237>},{<0.1197.0>,#Ref<0.1523191737.4192468995.100581>},{<0.1196.0>,#Ref<0.1523191737.4192468996.101233>},{<0.1195.0>,#Ref<0.1523191737.4192468997.97199>},{<0.1194.0>,#Ref<0.1523191737.4192468997.97196>},{<0.1193.0>,#Ref<0.1523191737.4192468997.97192>},{<0.1192.0>,#Ref<0.1523191737.4192468997.97190>},{<0.1191.0>,#Ref<0.1523191737.4192468997.97186>},{<0.1190.0>,#Ref<0.1523191737.4192468997.97184>},{<0.1189.0>,#Ref<0.1523191737.4192469000.98324>},{<0.1188.0>,#Ref<0.1523191737.4192468995.100538>},{<0.1187.0>,#Ref<0.1523191737.4192468997.97173>},{<0.1185.0>,#Ref<0.1523191737.4192468994.97892>},{<0.1182.0>,#Ref<0.1523191737.4192468994.97889>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[30217430167990509|258072215692707106]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1220.0>},custom_consumer => nil,pid => <0.1262.0>},channel_ref => #Ref<0.1523191737.4192468998.98083>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-snyiYFps1vaWzWbJtP-7Mg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:10 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-IuPOJu0qFckOvgICSJ8eJw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1241.0>,#Ref<0.1523191737.4192468995.100654>},{<0.1240.0>,#Ref<0.1523191737.4192468995.100650>},{<0.1239.0>,#Ref<0.1523191737.4192468995.100647>},{<0.1238.0>,#Ref<0.1523191737.4192468995.100644>},{<0.1237.0>,#Ref<0.1523191737.4192468995.100642>},{<0.1236.0>,#Ref<0.1523191737.4192468995.100638>},{<0.1235.0>,#Ref<0.1523191737.4192468995.100636>},{<0.1234.0>,#Ref<0.1523191737.4192468996.101327>},{<0.1233.0>,#Ref<0.1523191737.4192468996.101325>},{<0.1232.0>,#Ref<0.1523191737.4192468996.101322>},{<0.1231.0>,#Ref<0.1523191737.4192468996.101318>},{<0.1230.0>,#Ref<0.1523191737.4192468996.101315>},{<0.1229.0>,#Ref<0.1523191737.4192468996.101312>},{<0.1228.0>,#Ref<0.1523191737.4192468996.101310>},{<0.1227.0>,#Ref<0.1523191737.4192468996.101307>},{<0.1226.0>,#Ref<0.1523191737.4192468996.101303>},{<0.1225.0>,#Ref<0.1523191737.4192468996.101301>},{<0.1224.0>,#Ref<0.1523191737.4192468996.101298>},{<0.1223.0>,#Ref<0.1523191737.4192468997.97255>},{<0.1222.0>,#Ref<0.1523191737.4192468996.101295>},{<0.1221.0>,#Ref<0.1523191737.4192468997.97249>},{<0.1218.0>,#Ref<0.1523191737.4192468995.100633>},{<0.1216.0>,#Ref<0.1523191737.4192468997.97247>},{<0.1215.0>,#Ref<0.1523191737.4192468997.97243>},{<0.1214.0>,#Ref<0.1523191737.4192468996.101289>},{<0.1213.0>,#Ref<0.1523191737.4192468997.97241>},{<0.1212.0>,#Ref<0.1523191737.4192468996.101287>},{<0.1211.0>,#Ref<0.1523191737.4192468996.101282>},{<0.1210.0>,#Ref<0.1523191737.4192468995.100606>},{<0.1209.0>,#Ref<0.1523191737.4192468996.101280>},{<0.1208.0>,#Ref<0.1523191737.4192468996.101277>},{<0.1207.0>,#Ref<0.1523191737.4192468997.97235>},{<0.1205.0>,#Ref<0.1523191737.4192468997.97232>},{<0.1203.0>,#Ref<0.1523191737.4192468997.97230>},{<0.1202.0>,#Ref<0.1523191737.4192468997.97226>},{<0.1199.0>,#Ref<0.1523191737.4192468997.97224>},{<0.1198.0>,#Ref<0.1523191737.4192468996.101238>},{<0.1197.0>,#Ref<0.1523191737.4192468995.100580>},{<0.1196.0>,#Ref<0.1523191737.4192468996.101234>},{<0.1195.0>,#Ref<0.1523191737.4192468997.97198>},{<0.1194.0>,#Ref<0.1523191737.4192468997.97195>},{<0.1193.0>,#Ref<0.1523191737.4192468997.97193>},{<0.1192.0>,#Ref<0.1523191737.4192468997.97189>},{<0.1191.0>,#Ref<0.1523191737.4192468997.97187>},{<0.1190.0>,#Ref<0.1523191737.4192468997.97183>},{<0.1189.0>,#Ref<0.1523191737.4192469000.98323>},{<0.1188.0>,#Ref<0.1523191737.4192468995.100537>},{<0.1187.0>,#Ref<0.1523191737.4192468997.97174>},{<0.1185.0>,#Ref<0.1523191737.4192468994.97893>},{<0.1182.0>,#Ref<0.1523191737.4192468994.97890>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[7841256122870540|136267996018005515]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1186.0>},custom_consumer => nil,pid => <0.1266.0>},channel_ref => #Ref<0.1523191737.4192468997.97292>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-IuPOJu0qFckOvgICSJ8eJw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:10 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1180.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-snyiYFps1vaWzWbJtP-7Mg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468998.98083>,process,<0.1262.0>,normal},{'EXIT',<0.1220.0>,{shutdown,normal}}]
    links: [<0.1178.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 68876
  neighbours:
2021-08-07 17:47:10 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1180.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:10 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1179.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-IuPOJu0qFckOvgICSJ8eJw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468997.97292>,process,<0.1266.0>,normal},{'EXIT',<0.1186.0>,{shutdown,normal}}]
    links: [<0.1178.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 69097
  neighbours:
2021-08-07 17:47:10 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1179.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:10 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-T3Ip4o3-GwqFKdFyLu2kRA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[206336826540924030|81780379091141617]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1277.0>},custom_consumer => nil,pid => <0.1292.0>},channel_ref => #Ref<0.1523191737.4192468994.98149>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-T3Ip4o3-GwqFKdFyLu2kRA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:10 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-oZMPobIiO_ekm8-f46-Hxw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[136951218369280435|7117268750335423]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1274.0>},custom_consumer => nil,pid => <0.1296.0>},channel_ref => #Ref<0.1523191737.4192468994.98151>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-oZMPobIiO_ekm8-f46-Hxw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:10 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1271.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-T3Ip4o3-GwqFKdFyLu2kRA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468994.98149>,process,<0.1292.0>,normal},{'EXIT',<0.1277.0>,{shutdown,normal}}]
    links: [<0.1178.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52102
  neighbours:
2021-08-07 17:47:10 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1271.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:10 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1270.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-oZMPobIiO_ekm8-f46-Hxw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468994.98151>,process,<0.1296.0>,normal},{'EXIT',<0.1274.0>,{shutdown,normal}}]
    links: [<0.1178.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52102
  neighbours:
2021-08-07 17:47:10 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1270.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:10 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-ocspIcCJOsbVZgbVFmtrgg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[112546865552555274|103652322499020090]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1307.0>},custom_consumer => nil,pid => <0.1324.0>},channel_ref => #Ref<0.1523191737.4192468995.100804>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-ocspIcCJOsbVZgbVFmtrgg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:10 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-4-aBho0nxXejvrDPmQFVgg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[244190218729279561|260204565168888881]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1304.0>},custom_consumer => nil,pid => <0.1325.0>},channel_ref => #Ref<0.1523191737.4192468997.97654>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-4-aBho0nxXejvrDPmQFVgg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:47:10 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1301.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-ocspIcCJOsbVZgbVFmtrgg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1523191737.4192468995.100804>,process,<0.1324.0>,normal},{'EXIT',<0.1307.0>,{shutdown,normal}}]
    links: [<0.1178.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 52097
  neighbours:
2021-08-07 17:47:10 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1301.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:10 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.1301.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:47:14 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.ExampleWeb.Endpoint'}
     Context:    shutdown_error
     Reason:     killed
     Offender:   [{pid,<0.641.0>},{id,'Elixir.Plug.Cowboy.Drainer'},{mfargs,{'Elixir.Plug.Cowboy.Drainer',start_link,[[{refs,['Elixir.ExampleWeb.Endpoint.HTTP']}]]}},{restart_type,permanent},{significant,false},{shutdown,5000},{child_type,worker}]

2021-08-07 17:49:34 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-oUhOl60DvgcLW3282r5wnw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.713.0>,#Ref<0.3767718238.703070212.250195>},{<0.712.0>,#Ref<0.3767718238.703070211.250001>},{<0.711.0>,#Ref<0.3767718238.703070211.249998>},{<0.710.0>,#Ref<0.3767718238.703070212.250192>},{<0.709.0>,#Ref<0.3767718238.703070212.250188>},{<0.708.0>,#Ref<0.3767718238.703070212.250186>},{<0.707.0>,#Ref<0.3767718238.703070211.249995>},{<0.706.0>,#Ref<0.3767718238.703070211.249992>},{<0.705.0>,#Ref<0.3767718238.703070211.249988>},{<0.704.0>,#Ref<0.3767718238.703070211.249986>},{<0.703.0>,#Ref<0.3767718238.703070211.249983>},{<0.702.0>,#Ref<0.3767718238.703070211.249979>},{<0.701.0>,#Ref<0.3767718238.703070211.249977>},{<0.700.0>,#Ref<0.3767718238.703070211.249974>},{<0.699.0>,#Ref<0.3767718238.703070211.249970>},{<0.698.0>,#Ref<0.3767718238.703070211.249967>},{<0.697.0>,#Ref<0.3767718238.703070211.249965>},{<0.696.0>,#Ref<0.3767718238.703070212.250182>},{<0.695.0>,#Ref<0.3767718238.703070211.249961>},{<0.694.0>,#Ref<0.3767718238.703070211.249958>},{<0.693.0>,#Ref<0.3767718238.703070212.250180>},{<0.692.0>,#Ref<0.3767718238.703070211.249955>},{<0.691.0>,#Ref<0.3767718238.703070212.250177>},{<0.690.0>,#Ref<0.3767718238.703070212.250173>},{<0.689.0>,#Ref<0.3767718238.703070212.250171>},{<0.688.0>,#Ref<0.3767718238.703070212.250168>},{<0.687.0>,#Ref<0.3767718238.703070212.250165>},{<0.686.0>,#Ref<0.3767718238.703070212.250162>},{<0.685.0>,#Ref<0.3767718238.703070212.250159>},{<0.684.0>,#Ref<0.3767718238.703070212.250156>},{<0.683.0>,#Ref<0.3767718238.703070212.250153>},{<0.682.0>,#Ref<0.3767718238.703070212.250149>},{<0.681.0>,#Ref<0.3767718238.703070212.250147>},{<0.680.0>,#Ref<0.3767718238.703070212.250143>},{<0.679.0>,#Ref<0.3767718238.703070212.250140>},{<0.678.0>,#Ref<0.3767718238.703070212.250138>},{<0.677.0>,#Ref<0.3767718238.703070212.250134>},{<0.676.0>,#Ref<0.3767718238.703070212.250132>},{<0.675.0>,#Ref<0.3767718238.703070212.250128>},{<0.674.0>,#Ref<0.3767718238.703070212.250126>},{<0.673.0>,#Ref<0.3767718238.703070212.250123>},{<0.672.0>,#Ref<0.3767718238.703070212.250119>},{<0.671.0>,#Ref<0.3767718238.703070212.250117>},{<0.670.0>,#Ref<0.3767718238.703070212.250113>},{<0.669.0>,#Ref<0.3767718238.703070212.250111>},{<0.668.0>,#Ref<0.3767718238.703070212.250108>},{<0.667.0>,#Ref<0.3767718238.703070212.250104>},{<0.666.0>,#Ref<0.3767718238.703070212.250102>},{<0.665.0>,#Ref<0.3767718238.703070209.250832>},{<0.664.0>,#Ref<0.3767718238.703070212.250098>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[91564547994191402|124602672042484867]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.729.0>},custom_consumer => nil,pid => <0.747.0>},channel_ref => #Ref<0.3767718238.703070213.250904>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-oUhOl60DvgcLW3282r5wnw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Tj1plWUN38xeTcPos_mZ2A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.713.0>,#Ref<0.3767718238.703070212.250194>},{<0.712.0>,#Ref<0.3767718238.703070211.250000>},{<0.711.0>,#Ref<0.3767718238.703070211.249997>},{<0.710.0>,#Ref<0.3767718238.703070212.250191>},{<0.709.0>,#Ref<0.3767718238.703070212.250189>},{<0.708.0>,#Ref<0.3767718238.703070212.250185>},{<0.707.0>,#Ref<0.3767718238.703070211.249994>},{<0.706.0>,#Ref<0.3767718238.703070211.249991>},{<0.705.0>,#Ref<0.3767718238.703070211.249989>},{<0.704.0>,#Ref<0.3767718238.703070211.249985>},{<0.703.0>,#Ref<0.3767718238.703070211.249982>},{<0.702.0>,#Ref<0.3767718238.703070211.249980>},{<0.701.0>,#Ref<0.3767718238.703070211.249976>},{<0.700.0>,#Ref<0.3767718238.703070211.249973>},{<0.699.0>,#Ref<0.3767718238.703070211.249971>},{<0.698.0>,#Ref<0.3767718238.703070211.249968>},{<0.697.0>,#Ref<0.3767718238.703070211.249964>},{<0.696.0>,#Ref<0.3767718238.703070212.250183>},{<0.695.0>,#Ref<0.3767718238.703070211.249962>},{<0.694.0>,#Ref<0.3767718238.703070211.249959>},{<0.693.0>,#Ref<0.3767718238.703070212.250179>},{<0.692.0>,#Ref<0.3767718238.703070211.249956>},{<0.691.0>,#Ref<0.3767718238.703070212.250176>},{<0.690.0>,#Ref<0.3767718238.703070212.250174>},{<0.689.0>,#Ref<0.3767718238.703070212.250170>},{<0.688.0>,#Ref<0.3767718238.703070212.250167>},{<0.687.0>,#Ref<0.3767718238.703070212.250164>},{<0.686.0>,#Ref<0.3767718238.703070212.250161>},{<0.685.0>,#Ref<0.3767718238.703070212.250158>},{<0.684.0>,#Ref<0.3767718238.703070212.250155>},{<0.683.0>,#Ref<0.3767718238.703070212.250152>},{<0.682.0>,#Ref<0.3767718238.703070212.250150>},{<0.681.0>,#Ref<0.3767718238.703070212.250146>},{<0.680.0>,#Ref<0.3767718238.703070212.250144>},{<0.679.0>,#Ref<0.3767718238.703070212.250141>},{<0.678.0>,#Ref<0.3767718238.703070212.250137>},{<0.677.0>,#Ref<0.3767718238.703070212.250135>},{<0.676.0>,#Ref<0.3767718238.703070212.250131>},{<0.675.0>,#Ref<0.3767718238.703070212.250129>},{<0.674.0>,#Ref<0.3767718238.703070212.250125>},{<0.673.0>,#Ref<0.3767718238.703070212.250122>},{<0.672.0>,#Ref<0.3767718238.703070212.250120>},{<0.671.0>,#Ref<0.3767718238.703070212.250116>},{<0.670.0>,#Ref<0.3767718238.703070212.250114>},{<0.669.0>,#Ref<0.3767718238.703070212.250110>},{<0.668.0>,#Ref<0.3767718238.703070212.250107>},{<0.667.0>,#Ref<0.3767718238.703070212.250105>},{<0.666.0>,#Ref<0.3767718238.703070212.250101>},{<0.665.0>,#Ref<0.3767718238.703070209.250833>},{<0.664.0>,#Ref<0.3767718238.703070212.250099>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[16228694468818892|55810985623120176]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.726.0>},custom_consumer => nil,pid => <0.746.0>},channel_ref => #Ref<0.3767718238.703070211.250092>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-Tj1plWUN38xeTcPos_mZ2A">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.661.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-oUhOl60DvgcLW3282r5wnw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070213.250904>,process,<0.747.0>,normal},{'EXIT',<0.729.0>,{shutdown,normal}}]
    links: [<0.660.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 70057
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.661.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.662.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Tj1plWUN38xeTcPos_mZ2A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070211.250092>,process,<0.746.0>,normal},{'EXIT',<0.726.0>,{shutdown,normal}}]
    links: [<0.660.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 65669
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.662.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-MmhlASoMpH9UGBM3oBadKg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[100628589678258665|115512093948236711]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.759.0>},custom_consumer => nil,pid => <0.774.0>},channel_ref => #Ref<0.3767718238.703070210.254147>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-MmhlASoMpH9UGBM3oBadKg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-u-b6yTiCDMI7FtCXbTJhaQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[61023361137497735|11025949567728782]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.756.0>},custom_consumer => nil,pid => <0.778.0>},channel_ref => #Ref<0.3767718238.703070210.254151>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-u-b6yTiCDMI7FtCXbTJhaQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.753.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-MmhlASoMpH9UGBM3oBadKg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070210.254147>,process,<0.774.0>,normal},{'EXIT',<0.759.0>,{shutdown,normal}}]
    links: [<0.660.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48165
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.753.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.752.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-u-b6yTiCDMI7FtCXbTJhaQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070210.254151>,process,<0.778.0>,normal},{'EXIT',<0.756.0>,{shutdown,normal}}]
    links: [<0.660.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48166
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.752.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-xwDA1WbuG4V9VQFywafGwQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[258767437378002636|29508223248669130]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.789.0>},custom_consumer => nil,pid => <0.808.0>},channel_ref => #Ref<0.3767718238.703070213.251083>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-xwDA1WbuG4V9VQFywafGwQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-cjakCxqcsvzSXd2B8-dLpQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[57654178836691818|230618175162488719]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.786.0>},custom_consumer => nil,pid => <0.804.0>},channel_ref => #Ref<0.3767718238.703070210.254417>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-cjakCxqcsvzSXd2B8-dLpQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.783.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-xwDA1WbuG4V9VQFywafGwQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070213.251083>,process,<0.808.0>,normal},{'EXIT',<0.789.0>,{shutdown,normal}}]
    links: [<0.660.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48166
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.783.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.783.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.782.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-cjakCxqcsvzSXd2B8-dLpQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070210.254417>,process,<0.804.0>,normal},{'EXIT',<0.786.0>,{shutdown,normal}},{'EXIT',<0.660.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48162
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.782.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.660.0>},{id,#Ref<0.3767718238.703070209.250507>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-PSpxdF1k432awesJOOC5kQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.875.0>,#Ref<0.3767718238.703070209.251434>},{<0.874.0>,#Ref<0.3767718238.703070209.251430>},{<0.873.0>,#Ref<0.3767718238.703070209.251427>},{<0.872.0>,#Ref<0.3767718238.703070209.251424>},{<0.871.0>,#Ref<0.3767718238.703070210.254543>},{<0.870.0>,#Ref<0.3767718238.703070213.251228>},{<0.869.0>,#Ref<0.3767718238.703070209.251421>},{<0.868.0>,#Ref<0.3767718238.703070209.251418>},{<0.867.0>,#Ref<0.3767718238.703070213.251225>},{<0.866.0>,#Ref<0.3767718238.703070213.251222>},{<0.865.0>,#Ref<0.3767718238.703070209.251416>},{<0.864.0>,#Ref<0.3767718238.703070209.251412>},{<0.863.0>,#Ref<0.3767718238.703070209.251409>},{<0.862.0>,#Ref<0.3767718238.703070212.250597>},{<0.859.0>,#Ref<0.3767718238.703070209.251407>},{<0.857.0>,#Ref<0.3767718238.703070212.250593>},{<0.856.0>,#Ref<0.3767718238.703070213.251219>},{<0.855.0>,#Ref<0.3767718238.703070210.254534>},{<0.853.0>,#Ref<0.3767718238.703070210.254531>},{<0.850.0>,#Ref<0.3767718238.703070210.254528>},{<0.849.0>,#Ref<0.3767718238.703070210.254525>},{<0.847.0>,#Ref<0.3767718238.703070212.250589>},{<0.846.0>,#Ref<0.3767718238.703070213.251207>},{<0.845.0>,#Ref<0.3767718238.703070213.251204>},{<0.844.0>,#Ref<0.3767718238.703070213.251201>},{<0.843.0>,#Ref<0.3767718238.703070213.251198>},{<0.842.0>,#Ref<0.3767718238.703070209.251330>},{<0.841.0>,#Ref<0.3767718238.703070213.251194>},{<0.840.0>,#Ref<0.3767718238.703070213.251191>},{<0.839.0>,#Ref<0.3767718238.703070209.251311>},{<0.838.0>,#Ref<0.3767718238.703070209.251307>},{<0.837.0>,#Ref<0.3767718238.703070209.251305>},{<0.836.0>,#Ref<0.3767718238.703070209.251302>},{<0.835.0>,#Ref<0.3767718238.703070209.251298>},{<0.834.0>,#Ref<0.3767718238.703070209.251296>},{<0.833.0>,#Ref<0.3767718238.703070210.254517>},{<0.832.0>,#Ref<0.3767718238.703070209.251289>},{<0.831.0>,#Ref<0.3767718238.703070209.251285>},{<0.830.0>,#Ref<0.3767718238.703070209.251283>},{<0.828.0>,#Ref<0.3767718238.703070210.254512>},{<0.826.0>,#Ref<0.3767718238.703070210.254509>},{<0.824.0>,#Ref<0.3767718238.703070210.254505>},{<0.823.0>,#Ref<0.3767718238.703070209.251263>},{<0.822.0>,#Ref<0.3767718238.703070210.254499>},{<0.821.0>,#Ref<0.3767718238.703070210.254494>},{<0.820.0>,#Ref<0.3767718238.703070210.254490>},{<0.819.0>,#Ref<0.3767718238.703070210.254484>},{<0.818.0>,#Ref<0.3767718238.703070210.254480>},{<0.817.0>,#Ref<0.3767718238.703070210.254474>},{<0.816.0>,#Ref<0.3767718238.703070210.254470>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[43722431214372932|100369154071094126]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.829.0>},custom_consumer => nil,pid => <0.896.0>},channel_ref => #Ref<0.3767718238.703070210.254636>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-PSpxdF1k432awesJOOC5kQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-ufztIAX8NPh6zszSAqvvJQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.875.0>,#Ref<0.3767718238.703070209.251433>},{<0.874.0>,#Ref<0.3767718238.703070209.251431>},{<0.873.0>,#Ref<0.3767718238.703070209.251428>},{<0.872.0>,#Ref<0.3767718238.703070209.251425>},{<0.871.0>,#Ref<0.3767718238.703070210.254542>},{<0.870.0>,#Ref<0.3767718238.703070213.251229>},{<0.869.0>,#Ref<0.3767718238.703070209.251422>},{<0.868.0>,#Ref<0.3767718238.703070209.251419>},{<0.867.0>,#Ref<0.3767718238.703070213.251226>},{<0.866.0>,#Ref<0.3767718238.703070213.251223>},{<0.865.0>,#Ref<0.3767718238.703070209.251415>},{<0.864.0>,#Ref<0.3767718238.703070209.251413>},{<0.863.0>,#Ref<0.3767718238.703070209.251410>},{<0.862.0>,#Ref<0.3767718238.703070212.250596>},{<0.859.0>,#Ref<0.3767718238.703070209.251406>},{<0.857.0>,#Ref<0.3767718238.703070212.250594>},{<0.856.0>,#Ref<0.3767718238.703070213.251220>},{<0.855.0>,#Ref<0.3767718238.703070210.254535>},{<0.853.0>,#Ref<0.3767718238.703070210.254532>},{<0.850.0>,#Ref<0.3767718238.703070210.254529>},{<0.849.0>,#Ref<0.3767718238.703070210.254526>},{<0.847.0>,#Ref<0.3767718238.703070212.250590>},{<0.846.0>,#Ref<0.3767718238.703070213.251206>},{<0.845.0>,#Ref<0.3767718238.703070213.251203>},{<0.844.0>,#Ref<0.3767718238.703070213.251200>},{<0.843.0>,#Ref<0.3767718238.703070213.251197>},{<0.842.0>,#Ref<0.3767718238.703070209.251329>},{<0.841.0>,#Ref<0.3767718238.703070213.251195>},{<0.840.0>,#Ref<0.3767718238.703070213.251192>},{<0.839.0>,#Ref<0.3767718238.703070209.251310>},{<0.838.0>,#Ref<0.3767718238.703070209.251308>},{<0.837.0>,#Ref<0.3767718238.703070209.251304>},{<0.836.0>,#Ref<0.3767718238.703070209.251301>},{<0.835.0>,#Ref<0.3767718238.703070209.251299>},{<0.834.0>,#Ref<0.3767718238.703070209.251295>},{<0.833.0>,#Ref<0.3767718238.703070210.254518>},{<0.832.0>,#Ref<0.3767718238.703070209.251288>},{<0.831.0>,#Ref<0.3767718238.703070209.251286>},{<0.830.0>,#Ref<0.3767718238.703070209.251282>},{<0.828.0>,#Ref<0.3767718238.703070210.254511>},{<0.826.0>,#Ref<0.3767718238.703070210.254508>},{<0.824.0>,#Ref<0.3767718238.703070210.254506>},{<0.823.0>,#Ref<0.3767718238.703070209.251262>},{<0.822.0>,#Ref<0.3767718238.703070210.254500>},{<0.821.0>,#Ref<0.3767718238.703070210.254495>},{<0.820.0>,#Ref<0.3767718238.703070210.254489>},{<0.819.0>,#Ref<0.3767718238.703070210.254485>},{<0.818.0>,#Ref<0.3767718238.703070210.254479>},{<0.817.0>,#Ref<0.3767718238.703070210.254475>},{<0.816.0>,#Ref<0.3767718238.703070210.254469>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[110400001677719985|33768694572177869]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.861.0>},custom_consumer => nil,pid => <0.900.0>},channel_ref => #Ref<0.3767718238.703070212.250621>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-ufztIAX8NPh6zszSAqvvJQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.814.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-PSpxdF1k432awesJOOC5kQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070210.254636>,process,<0.896.0>,normal},{'EXIT',<0.829.0>,{shutdown,normal}}]
    links: [<0.812.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 65061
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.814.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.813.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-ufztIAX8NPh6zszSAqvvJQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070212.250621>,process,<0.900.0>,normal},{'EXIT',<0.861.0>,{shutdown,normal}}]
    links: [<0.812.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 64818
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.813.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-BROSVrsAnR283vqrSQJpqw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[104575751642017001|39483173093416847]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.908.0>},custom_consumer => nil,pid => <0.926.0>},channel_ref => #Ref<0.3767718238.703070209.251765>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-BROSVrsAnR283vqrSQJpqw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-4q34N2dJfvU36gQ_pjxKjg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[74803890281556006|141337833379567378]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.911.0>},custom_consumer => nil,pid => <0.930.0>},channel_ref => #Ref<0.3767718238.703070209.251768>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-4q34N2dJfvU36gQ_pjxKjg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.904.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-BROSVrsAnR283vqrSQJpqw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070209.251765>,process,<0.926.0>,normal},{'EXIT',<0.908.0>,{shutdown,normal}}]
    links: [<0.812.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48161
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.904.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:35 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.905.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-4q34N2dJfvU36gQ_pjxKjg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070209.251768>,process,<0.930.0>,normal},{'EXIT',<0.911.0>,{shutdown,normal}}]
    links: [<0.812.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48170
  neighbours:
2021-08-07 17:49:35 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.905.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:36 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-FrHEl3iXS-4N5fH4K8eBEA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[139208184781174640|76968572329672140]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.938.0>},custom_consumer => nil,pid => <0.960.0>},channel_ref => #Ref<0.3767718238.703070215.250283>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-FrHEl3iXS-4N5fH4K8eBEA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:36 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-C4i0LfzW9L161HAqNB2JjA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[152483626850884271|207825875563861097]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.941.0>},custom_consumer => nil,pid => <0.956.0>},channel_ref => #Ref<0.3767718238.703070213.251620>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-C4i0LfzW9L161HAqNB2JjA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:36 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.934.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-FrHEl3iXS-4N5fH4K8eBEA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070215.250283>,process,<0.960.0>,normal},{'EXIT',<0.938.0>,{shutdown,normal}}]
    links: [<0.812.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48157
  neighbours:
2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.934.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.934.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:36 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.935.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-C4i0LfzW9L161HAqNB2JjA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070213.251620>,process,<0.956.0>,normal},{'EXIT',<0.941.0>,{shutdown,normal}},{'EXIT',<0.812.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48157
  neighbours:
2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.935.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.812.0>},{id,#Ref<0.3767718238.703070209.250507>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:49:36 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-AgGDOa7SxT3CHMvmonYDgQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1031.0>,#Ref<0.3767718238.703070211.250672>},{<0.1030.0>,#Ref<0.3767718238.703070211.250668>},{<0.1029.0>,#Ref<0.3767718238.703070213.251782>},{<0.1028.0>,#Ref<0.3767718238.703070212.250734>},{<0.1025.0>,#Ref<0.3767718238.703070215.250494>},{<0.1023.0>,#Ref<0.3767718238.703070211.250664>},{<0.1022.0>,#Ref<0.3767718238.703070213.251778>},{<0.1020.0>,#Ref<0.3767718238.703070215.250489>},{<0.1019.0>,#Ref<0.3767718238.703070215.250486>},{<0.1018.0>,#Ref<0.3767718238.703070212.250731>},{<0.1017.0>,#Ref<0.3767718238.703070215.250484>},{<0.1016.0>,#Ref<0.3767718238.703070212.250728>},{<0.1015.0>,#Ref<0.3767718238.703070211.250662>},{<0.1014.0>,#Ref<0.3767718238.703070212.250725>},{<0.1013.0>,#Ref<0.3767718238.703070212.250722>},{<0.1012.0>,#Ref<0.3767718238.703070211.250658>},{<0.1011.0>,#Ref<0.3767718238.703070212.250718>},{<0.1010.0>,#Ref<0.3767718238.703070212.250715>},{<0.1009.0>,#Ref<0.3767718238.703070212.250712>},{<0.1008.0>,#Ref<0.3767718238.703070212.250709>},{<0.1006.0>,#Ref<0.3767718238.703070212.250706>},{<0.1004.0>,#Ref<0.3767718238.703070215.250480>},{<0.1002.0>,#Ref<0.3767718238.703070212.250704>},{<0.1001.0>,#Ref<0.3767718238.703070209.252144>},{<0.1000.0>,#Ref<0.3767718238.703070215.250478>},{<0.999.0>,#Ref<0.3767718238.703070215.250475>},{<0.998.0>,#Ref<0.3767718238.703070215.250471>},{<0.997.0>,#Ref<0.3767718238.703070210.254916>},{<0.996.0>,#Ref<0.3767718238.703070210.254913>},{<0.995.0>,#Ref<0.3767718238.703070215.250452>},{<0.994.0>,#Ref<0.3767718238.703070210.254910>},{<0.993.0>,#Ref<0.3767718238.703070215.250449>},{<0.991.0>,#Ref<0.3767718238.703070215.250445>},{<0.989.0>,#Ref<0.3767718238.703070215.250443>},{<0.987.0>,#Ref<0.3767718238.703070215.250439>},{<0.985.0>,#Ref<0.3767718238.703070209.252099>},{<0.984.0>,#Ref<0.3767718238.703070209.252097>},{<0.983.0>,#Ref<0.3767718238.703070209.252093>},{<0.982.0>,#Ref<0.3767718238.703070210.254883>},{<0.981.0>,#Ref<0.3767718238.703070209.252090>},{<0.980.0>,#Ref<0.3767718238.703070209.252087>},{<0.979.0>,#Ref<0.3767718238.703070209.252085>},{<0.978.0>,#Ref<0.3767718238.703070213.251773>},{<0.977.0>,#Ref<0.3767718238.703070213.251769>},{<0.976.0>,#Ref<0.3767718238.703070213.251766>},{<0.975.0>,#Ref<0.3767718238.703070213.251762>},{<0.974.0>,#Ref<0.3767718238.703070213.251760>},{<0.973.0>,#Ref<0.3767718238.703070213.251757>},{<0.972.0>,#Ref<0.3767718238.703070210.254824>},{<0.971.0>,#Ref<0.3767718238.703070213.251753>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[18947995015841328|197299911618315693]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.970.0>},custom_consumer => nil,pid => <0.1052.0>},channel_ref => #Ref<0.3767718238.703070210.254946>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-AgGDOa7SxT3CHMvmonYDgQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:36 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-AWbmt7KByCXrSVttKj0hMg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1031.0>,#Ref<0.3767718238.703070211.250671>},{<0.1030.0>,#Ref<0.3767718238.703070211.250669>},{<0.1029.0>,#Ref<0.3767718238.703070213.251783>},{<0.1028.0>,#Ref<0.3767718238.703070212.250733>},{<0.1025.0>,#Ref<0.3767718238.703070215.250495>},{<0.1023.0>,#Ref<0.3767718238.703070211.250665>},{<0.1022.0>,#Ref<0.3767718238.703070213.251779>},{<0.1020.0>,#Ref<0.3767718238.703070215.250490>},{<0.1019.0>,#Ref<0.3767718238.703070215.250487>},{<0.1018.0>,#Ref<0.3767718238.703070212.250730>},{<0.1017.0>,#Ref<0.3767718238.703070215.250483>},{<0.1016.0>,#Ref<0.3767718238.703070212.250727>},{<0.1015.0>,#Ref<0.3767718238.703070211.250661>},{<0.1014.0>,#Ref<0.3767718238.703070212.250724>},{<0.1013.0>,#Ref<0.3767718238.703070212.250721>},{<0.1012.0>,#Ref<0.3767718238.703070211.250659>},{<0.1011.0>,#Ref<0.3767718238.703070212.250719>},{<0.1010.0>,#Ref<0.3767718238.703070212.250716>},{<0.1009.0>,#Ref<0.3767718238.703070212.250713>},{<0.1008.0>,#Ref<0.3767718238.703070212.250710>},{<0.1006.0>,#Ref<0.3767718238.703070212.250707>},{<0.1004.0>,#Ref<0.3767718238.703070215.250481>},{<0.1002.0>,#Ref<0.3767718238.703070212.250703>},{<0.1001.0>,#Ref<0.3767718238.703070209.252143>},{<0.1000.0>,#Ref<0.3767718238.703070215.250477>},{<0.999.0>,#Ref<0.3767718238.703070215.250474>},{<0.998.0>,#Ref<0.3767718238.703070215.250472>},{<0.997.0>,#Ref<0.3767718238.703070210.254917>},{<0.996.0>,#Ref<0.3767718238.703070210.254914>},{<0.995.0>,#Ref<0.3767718238.703070215.250453>},{<0.994.0>,#Ref<0.3767718238.703070210.254911>},{<0.993.0>,#Ref<0.3767718238.703070215.250448>},{<0.991.0>,#Ref<0.3767718238.703070215.250446>},{<0.989.0>,#Ref<0.3767718238.703070215.250442>},{<0.987.0>,#Ref<0.3767718238.703070215.250440>},{<0.985.0>,#Ref<0.3767718238.703070209.252100>},{<0.984.0>,#Ref<0.3767718238.703070209.252096>},{<0.983.0>,#Ref<0.3767718238.703070209.252094>},{<0.982.0>,#Ref<0.3767718238.703070210.254882>},{<0.981.0>,#Ref<0.3767718238.703070209.252091>},{<0.980.0>,#Ref<0.3767718238.703070209.252088>},{<0.979.0>,#Ref<0.3767718238.703070209.252084>},{<0.978.0>,#Ref<0.3767718238.703070213.251772>},{<0.977.0>,#Ref<0.3767718238.703070213.251770>},{<0.976.0>,#Ref<0.3767718238.703070213.251765>},{<0.975.0>,#Ref<0.3767718238.703070213.251763>},{<0.974.0>,#Ref<0.3767718238.703070213.251759>},{<0.973.0>,#Ref<0.3767718238.703070213.251756>},{<0.972.0>,#Ref<0.3767718238.703070210.254823>},{<0.971.0>,#Ref<0.3767718238.703070213.251754>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[110368453093385898|33734153156259426]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1007.0>},custom_consumer => nil,pid => <0.1048.0>},channel_ref => #Ref<0.3767718238.703070209.252172>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-AWbmt7KByCXrSVttKj0hMg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:36 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.965.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-AgGDOa7SxT3CHMvmonYDgQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070210.254946>,process,<0.1052.0>,normal},{'EXIT',<0.970.0>,{shutdown,normal}}]
    links: [<0.964.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65139
  neighbours:
2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.965.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:36 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.966.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-AWbmt7KByCXrSVttKj0hMg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070209.252172>,process,<0.1048.0>,normal},{'EXIT',<0.1007.0>,{shutdown,normal}}]
    links: [<0.964.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65058
  neighbours:
2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.966.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:36 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-zIRUdpUzFCGXVrrbioEMuA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[123985630183267972|20194858922449725]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1060.0>},custom_consumer => nil,pid => <0.1082.0>},channel_ref => #Ref<0.3767718238.703070209.252484>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-zIRUdpUzFCGXVrrbioEMuA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:36 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-0IXxk12ZbXW_iGB8XQOauw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[25993791576692860|118107945908088311]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1063.0>},custom_consumer => nil,pid => <0.1078.0>},channel_ref => #Ref<0.3767718238.703070209.252479>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-0IXxk12ZbXW_iGB8XQOauw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:49:36 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1056.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-zIRUdpUzFCGXVrrbioEMuA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070209.252484>,process,<0.1082.0>,normal},{'EXIT',<0.1060.0>,{shutdown,normal}}]
    links: [<0.964.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48161
  neighbours:
2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1056.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:49:36 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1057.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.499.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-0IXxk12ZbXW_iGB8XQOauw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.3767718238.703070209.252479>,process,<0.1078.0>,normal},{'EXIT',<0.1063.0>,{shutdown,normal}}]
    links: [<0.964.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48161
  neighbours:
2021-08-07 17:49:36 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1057.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-UUPaKil4xO6vvW6m_U2pKQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.697.0>,#Ref<0.2937114680.3119513605.216056>},{<0.696.0>,#Ref<0.2937114680.3119513604.216744>},{<0.695.0>,#Ref<0.2937114680.3119513604.216741>},{<0.694.0>,#Ref<0.2937114680.3119513604.216737>},{<0.693.0>,#Ref<0.2937114680.3119513604.216734>},{<0.692.0>,#Ref<0.2937114680.3119513604.216731>},{<0.691.0>,#Ref<0.2937114680.3119513604.216729>},{<0.690.0>,#Ref<0.2937114680.3119513604.216726>},{<0.689.0>,#Ref<0.2937114680.3119513604.216723>},{<0.688.0>,#Ref<0.2937114680.3119513604.216719>},{<0.687.0>,#Ref<0.2937114680.3119513604.216717>},{<0.686.0>,#Ref<0.2937114680.3119513604.216714>},{<0.685.0>,#Ref<0.2937114680.3119513604.216711>},{<0.684.0>,#Ref<0.2937114680.3119513604.216708>},{<0.683.0>,#Ref<0.2937114680.3119513604.216705>},{<0.682.0>,#Ref<0.2937114680.3119513604.216701>},{<0.681.0>,#Ref<0.2937114680.3119513604.216698>},{<0.680.0>,#Ref<0.2937114680.3119513604.216695>},{<0.679.0>,#Ref<0.2937114680.3119513604.216692>},{<0.678.0>,#Ref<0.2937114680.3119513604.216689>},{<0.677.0>,#Ref<0.2937114680.3119513604.216687>},{<0.676.0>,#Ref<0.2937114680.3119513604.216683>},{<0.675.0>,#Ref<0.2937114680.3119513604.216681>},{<0.674.0>,#Ref<0.2937114680.3119513604.216678>},{<0.673.0>,#Ref<0.2937114680.3119513604.216675>},{<0.672.0>,#Ref<0.2937114680.3119513604.216672>},{<0.671.0>,#Ref<0.2937114680.3119513606.217944>},{<0.670.0>,#Ref<0.2937114680.3119513606.217940>},{<0.669.0>,#Ref<0.2937114680.3119513606.217937>},{<0.668.0>,#Ref<0.2937114680.3119513606.217935>},{<0.667.0>,#Ref<0.2937114680.3119513606.217931>},{<0.666.0>,#Ref<0.2937114680.3119513606.217928>},{<0.665.0>,#Ref<0.2937114680.3119513606.217926>},{<0.664.0>,#Ref<0.2937114680.3119513606.217922>},{<0.663.0>,#Ref<0.2937114680.3119513604.216668>},{<0.662.0>,#Ref<0.2937114680.3119513606.217919>},{<0.661.0>,#Ref<0.2937114680.3119513606.217917>},{<0.660.0>,#Ref<0.2937114680.3119513606.217913>},{<0.659.0>,#Ref<0.2937114680.3119513606.217910>},{<0.658.0>,#Ref<0.2937114680.3119513606.217908>},{<0.657.0>,#Ref<0.2937114680.3119513604.216666>},{<0.656.0>,#Ref<0.2937114680.3119513606.217905>},{<0.655.0>,#Ref<0.2937114680.3119513606.217902>},{<0.654.0>,#Ref<0.2937114680.3119513606.217898>},{<0.653.0>,#Ref<0.2937114680.3119513606.217896>},{<0.652.0>,#Ref<0.2937114680.3119513606.217892>},{<0.651.0>,#Ref<0.2937114680.3119513606.217889>},{<0.650.0>,#Ref<0.2937114680.3119513606.217887>},{<0.649.0>,#Ref<0.2937114680.3119513606.217884>},{<0.648.0>,#Ref<0.2937114680.3119513606.217880>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[32679160475146415|255466735386116289]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.710.0>},custom_consumer => nil,pid => <0.731.0>},channel_ref => #Ref<0.2937114680.3119513606.218042>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-UUPaKil4xO6vvW6m_U2pKQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-VbukXLEOzIuuCtKsBlrj1A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.697.0>,#Ref<0.2937114680.3119513605.216055>},{<0.696.0>,#Ref<0.2937114680.3119513604.216743>},{<0.695.0>,#Ref<0.2937114680.3119513604.216740>},{<0.694.0>,#Ref<0.2937114680.3119513604.216738>},{<0.693.0>,#Ref<0.2937114680.3119513604.216735>},{<0.692.0>,#Ref<0.2937114680.3119513604.216732>},{<0.691.0>,#Ref<0.2937114680.3119513604.216728>},{<0.690.0>,#Ref<0.2937114680.3119513604.216725>},{<0.689.0>,#Ref<0.2937114680.3119513604.216722>},{<0.688.0>,#Ref<0.2937114680.3119513604.216720>},{<0.687.0>,#Ref<0.2937114680.3119513604.216716>},{<0.686.0>,#Ref<0.2937114680.3119513604.216713>},{<0.685.0>,#Ref<0.2937114680.3119513604.216710>},{<0.684.0>,#Ref<0.2937114680.3119513604.216707>},{<0.683.0>,#Ref<0.2937114680.3119513604.216704>},{<0.682.0>,#Ref<0.2937114680.3119513604.216702>},{<0.681.0>,#Ref<0.2937114680.3119513604.216699>},{<0.680.0>,#Ref<0.2937114680.3119513604.216696>},{<0.679.0>,#Ref<0.2937114680.3119513604.216693>},{<0.678.0>,#Ref<0.2937114680.3119513604.216690>},{<0.677.0>,#Ref<0.2937114680.3119513604.216686>},{<0.676.0>,#Ref<0.2937114680.3119513604.216684>},{<0.675.0>,#Ref<0.2937114680.3119513604.216680>},{<0.674.0>,#Ref<0.2937114680.3119513604.216677>},{<0.673.0>,#Ref<0.2937114680.3119513604.216674>},{<0.672.0>,#Ref<0.2937114680.3119513604.216671>},{<0.671.0>,#Ref<0.2937114680.3119513606.217943>},{<0.670.0>,#Ref<0.2937114680.3119513606.217941>},{<0.669.0>,#Ref<0.2937114680.3119513606.217938>},{<0.668.0>,#Ref<0.2937114680.3119513606.217934>},{<0.667.0>,#Ref<0.2937114680.3119513606.217932>},{<0.666.0>,#Ref<0.2937114680.3119513606.217929>},{<0.665.0>,#Ref<0.2937114680.3119513606.217925>},{<0.664.0>,#Ref<0.2937114680.3119513606.217923>},{<0.663.0>,#Ref<0.2937114680.3119513604.216669>},{<0.662.0>,#Ref<0.2937114680.3119513606.217920>},{<0.661.0>,#Ref<0.2937114680.3119513606.217916>},{<0.660.0>,#Ref<0.2937114680.3119513606.217914>},{<0.659.0>,#Ref<0.2937114680.3119513606.217911>},{<0.658.0>,#Ref<0.2937114680.3119513606.217907>},{<0.657.0>,#Ref<0.2937114680.3119513604.216665>},{<0.656.0>,#Ref<0.2937114680.3119513606.217904>},{<0.655.0>,#Ref<0.2937114680.3119513606.217901>},{<0.654.0>,#Ref<0.2937114680.3119513606.217899>},{<0.653.0>,#Ref<0.2937114680.3119513606.217895>},{<0.652.0>,#Ref<0.2937114680.3119513606.217893>},{<0.651.0>,#Ref<0.2937114680.3119513606.217890>},{<0.650.0>,#Ref<0.2937114680.3119513606.217886>},{<0.649.0>,#Ref<0.2937114680.3119513606.217883>},{<0.648.0>,#Ref<0.2937114680.3119513606.217881>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[55209864275551806|232961326111663214]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.713.0>},custom_consumer => nil,pid => <0.730.0>},channel_ref => #Ref<0.2937114680.3119513603.216275>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-VbukXLEOzIuuCtKsBlrj1A">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.645.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 2
    messages: [{'DOWN',#Ref<0.2937114680.3119513603.216275>,process,<0.730.0>,normal},{'EXIT',<0.713.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 69807
  neighbours:
2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.646.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-UUPaKil4xO6vvW6m_U2pKQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.218042>,process,<0.731.0>,normal},{'EXIT',<0.710.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65279
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.646.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.645.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-bo3o1JaMuD6aFur-UKjfow">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[144156518349476780|288195784699882001]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.743.0>},custom_consumer => nil,pid => <0.758.0>},channel_ref => #Ref<0.2937114680.3119513605.216127>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-bo3o1JaMuD6aFur-UKjfow">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-MVLJ9VhVzAXuUZxq6NWq_A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[98244607147593784|45819891174481564]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.740.0>},custom_consumer => nil,pid => <0.762.0>},channel_ref => #Ref<0.2937114680.3119513606.218412>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-MVLJ9VhVzAXuUZxq6NWq_A">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.737.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-bo3o1JaMuD6aFur-UKjfow">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.216127>,process,<0.758.0>,normal},{'EXIT',<0.743.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48154
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.737.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.736.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-MVLJ9VhVzAXuUZxq6NWq_A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.218412>,process,<0.762.0>,normal},{'EXIT',<0.740.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48165
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.736.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-AGJUS2fMqM9JeE4GhlgwFw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[32959870364400127|39116337906454113]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.770.0>},custom_consumer => nil,pid => <0.792.0>},channel_ref => #Ref<0.2937114680.3119513603.216542>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-AGJUS2fMqM9JeE4GhlgwFw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-boxle5kZSO7vHYv7bRXUwg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[276367989078875399|228060508982196440]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.777.0>},custom_consumer => nil,pid => <0.788.0>},channel_ref => #Ref<0.2937114680.3119513606.218883>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-boxle5kZSO7vHYv7bRXUwg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.766.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-AGJUS2fMqM9JeE4GhlgwFw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513603.216542>,process,<0.792.0>,normal},{'EXIT',<0.770.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48161
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.766.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.766.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.767.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-boxle5kZSO7vHYv7bRXUwg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.218883>,process,<0.788.0>,normal},{'EXIT',<0.777.0>,{shutdown,normal}},{'EXIT',<0.644.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48158
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.767.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.644.0>},{id,#Ref<0.2937114680.3119513604.216387>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-7aURZScerwiftuGw4-hvcw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.859.0>,#Ref<0.2937114680.3119513604.216884>},{<0.858.0>,#Ref<0.2937114680.3119513605.216351>},{<0.857.0>,#Ref<0.2937114680.3119513604.216882>},{<0.856.0>,#Ref<0.2937114680.3119513606.219284>},{<0.855.0>,#Ref<0.2937114680.3119513606.219281>},{<0.854.0>,#Ref<0.2937114680.3119513606.219277>},{<0.853.0>,#Ref<0.2937114680.3119513604.216877>},{<0.852.0>,#Ref<0.2937114680.3119513604.216873>},{<0.851.0>,#Ref<0.2937114680.3119513604.216870>},{<0.850.0>,#Ref<0.2937114680.3119513604.216868>},{<0.849.0>,#Ref<0.2937114680.3119513604.216864>},{<0.848.0>,#Ref<0.2937114680.3119513604.216861>},{<0.847.0>,#Ref<0.2937114680.3119513604.216858>},{<0.846.0>,#Ref<0.2937114680.3119513605.216348>},{<0.845.0>,#Ref<0.2937114680.3119513604.216855>},{<0.844.0>,#Ref<0.2937114680.3119513605.216346>},{<0.843.0>,#Ref<0.2937114680.3119513606.219274>},{<0.842.0>,#Ref<0.2937114680.3119513604.216852>},{<0.841.0>,#Ref<0.2937114680.3119513606.219271>},{<0.840.0>,#Ref<0.2937114680.3119513606.219268>},{<0.839.0>,#Ref<0.2937114680.3119513606.219265>},{<0.838.0>,#Ref<0.2937114680.3119513606.219262>},{<0.837.0>,#Ref<0.2937114680.3119513606.219260>},{<0.836.0>,#Ref<0.2937114680.3119513606.219257>},{<0.834.0>,#Ref<0.2937114680.3119513606.219253>},{<0.833.0>,#Ref<0.2937114680.3119513606.219250>},{<0.832.0>,#Ref<0.2937114680.3119513606.219248>},{<0.831.0>,#Ref<0.2937114680.3119513606.219245>},{<0.829.0>,#Ref<0.2937114680.3119513606.219241>},{<0.828.0>,#Ref<0.2937114680.3119513606.219238>},{<0.826.0>,#Ref<0.2937114680.3119513606.219236>},{<0.825.0>,#Ref<0.2937114680.3119513606.219233>},{<0.824.0>,#Ref<0.2937114680.3119513606.219230>},{<0.820.0>,#Ref<0.2937114680.3119513606.219227>},{<0.818.0>,#Ref<0.2937114680.3119513606.219223>},{<0.817.0>,#Ref<0.2937114680.3119513606.219220>},{<0.816.0>,#Ref<0.2937114680.3119513606.219217>},{<0.815.0>,#Ref<0.2937114680.3119513601.217633>},{<0.814.0>,#Ref<0.2937114680.3119513601.217631>},{<0.813.0>,#Ref<0.2937114680.3119513601.217628>},{<0.812.0>,#Ref<0.2937114680.3119513601.217625>},{<0.811.0>,#Ref<0.2937114680.3119513601.217622>},{<0.810.0>,#Ref<0.2937114680.3119513601.217619>},{<0.809.0>,#Ref<0.2937114680.3119513601.217616>},{<0.808.0>,#Ref<0.2937114680.3119513606.219161>},{<0.807.0>,#Ref<0.2937114680.3119513601.217612>},{<0.804.0>,#Ref<0.2937114680.3119513601.217610>},{<0.802.0>,#Ref<0.2937114680.3119513605.216230>},{<0.801.0>,#Ref<0.2937114680.3119513601.217605>},{<0.800.0>,#Ref<0.2937114680.3119513606.219110>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[125977450322668594|90194299625667867]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.806.0>},custom_consumer => nil,pid => <0.880.0>},channel_ref => #Ref<0.2937114680.3119513605.216387>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-7aURZScerwiftuGw4-hvcw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-J-F19nt1wAX2tlwvHqUlYw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.859.0>,#Ref<0.2937114680.3119513604.216885>},{<0.858.0>,#Ref<0.2937114680.3119513605.216352>},{<0.857.0>,#Ref<0.2937114680.3119513604.216881>},{<0.856.0>,#Ref<0.2937114680.3119513606.219283>},{<0.855.0>,#Ref<0.2937114680.3119513606.219280>},{<0.854.0>,#Ref<0.2937114680.3119513606.219278>},{<0.853.0>,#Ref<0.2937114680.3119513604.216876>},{<0.852.0>,#Ref<0.2937114680.3119513604.216874>},{<0.851.0>,#Ref<0.2937114680.3119513604.216871>},{<0.850.0>,#Ref<0.2937114680.3119513604.216867>},{<0.849.0>,#Ref<0.2937114680.3119513604.216865>},{<0.848.0>,#Ref<0.2937114680.3119513604.216862>},{<0.847.0>,#Ref<0.2937114680.3119513604.216859>},{<0.846.0>,#Ref<0.2937114680.3119513605.216349>},{<0.845.0>,#Ref<0.2937114680.3119513604.216856>},{<0.844.0>,#Ref<0.2937114680.3119513605.216345>},{<0.843.0>,#Ref<0.2937114680.3119513606.219275>},{<0.842.0>,#Ref<0.2937114680.3119513604.216853>},{<0.841.0>,#Ref<0.2937114680.3119513606.219272>},{<0.840.0>,#Ref<0.2937114680.3119513606.219269>},{<0.839.0>,#Ref<0.2937114680.3119513606.219266>},{<0.838.0>,#Ref<0.2937114680.3119513606.219263>},{<0.837.0>,#Ref<0.2937114680.3119513606.219259>},{<0.836.0>,#Ref<0.2937114680.3119513606.219256>},{<0.834.0>,#Ref<0.2937114680.3119513606.219254>},{<0.833.0>,#Ref<0.2937114680.3119513606.219251>},{<0.832.0>,#Ref<0.2937114680.3119513606.219247>},{<0.831.0>,#Ref<0.2937114680.3119513606.219244>},{<0.829.0>,#Ref<0.2937114680.3119513606.219242>},{<0.828.0>,#Ref<0.2937114680.3119513606.219239>},{<0.826.0>,#Ref<0.2937114680.3119513606.219235>},{<0.825.0>,#Ref<0.2937114680.3119513606.219232>},{<0.824.0>,#Ref<0.2937114680.3119513606.219229>},{<0.820.0>,#Ref<0.2937114680.3119513606.219226>},{<0.818.0>,#Ref<0.2937114680.3119513606.219224>},{<0.817.0>,#Ref<0.2937114680.3119513606.219221>},{<0.816.0>,#Ref<0.2937114680.3119513606.219218>},{<0.815.0>,#Ref<0.2937114680.3119513601.217634>},{<0.814.0>,#Ref<0.2937114680.3119513601.217630>},{<0.813.0>,#Ref<0.2937114680.3119513601.217627>},{<0.812.0>,#Ref<0.2937114680.3119513601.217624>},{<0.811.0>,#Ref<0.2937114680.3119513601.217621>},{<0.810.0>,#Ref<0.2937114680.3119513601.217618>},{<0.809.0>,#Ref<0.2937114680.3119513601.217615>},{<0.808.0>,#Ref<0.2937114680.3119513606.219160>},{<0.807.0>,#Ref<0.2937114680.3119513601.217613>},{<0.804.0>,#Ref<0.2937114680.3119513601.217609>},{<0.802.0>,#Ref<0.2937114680.3119513605.216231>},{<0.801.0>,#Ref<0.2937114680.3119513601.217606>},{<0.800.0>,#Ref<0.2937114680.3119513606.219111>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[52328696635224504|19713959158234177]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.835.0>},custom_consumer => nil,pid => <0.884.0>},channel_ref => #Ref<0.2937114680.3119513606.219344>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-J-F19nt1wAX2tlwvHqUlYw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.797.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-7aURZScerwiftuGw4-hvcw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.216387>,process,<0.880.0>,normal},{'EXIT',<0.806.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 65073
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.797.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.798.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-J-F19nt1wAX2tlwvHqUlYw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.219344>,process,<0.884.0>,normal},{'EXIT',<0.835.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 64679
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.798.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-7na09Sn8FS1tEIJLdrm_Mw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[98370245901844081|117825700885757446]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.895.0>},custom_consumer => nil,pid => <0.911.0>},channel_ref => #Ref<0.2937114680.3119513604.216987>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-7na09Sn8FS1tEIJLdrm_Mw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-pnqN1qacdV7LxATugTEp9g">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[237336844893177789|267069271370354319]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.892.0>},custom_consumer => nil,pid => <0.914.0>},channel_ref => #Ref<0.2937114680.3119513606.219496>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-pnqN1qacdV7LxATugTEp9g">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.889.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-7na09Sn8FS1tEIJLdrm_Mw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513604.216987>,process,<0.911.0>,normal},{'EXIT',<0.895.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48153
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.889.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.888.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-pnqN1qacdV7LxATugTEp9g">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.219496>,process,<0.914.0>,normal},{'EXIT',<0.892.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48154
  neighbours:
2021-08-07 17:50:48 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.888.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:48 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-OxqfqaZQXzGR28KCzgjwSw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[118908742133863148|97270606894637538]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.922.0>},custom_consumer => nil,pid => <0.940.0>},channel_ref => #Ref<0.2937114680.3119513606.219681>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-OxqfqaZQXzGR28KCzgjwSw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-w1uoXGBxMFfn5emyMQh0Wg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[182447045671529184|177835809461161120]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.926.0>},custom_consumer => nil,pid => <0.944.0>},channel_ref => #Ref<0.2937114680.3119513606.219688>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-w1uoXGBxMFfn5emyMQh0Wg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.918.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-OxqfqaZQXzGR28KCzgjwSw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.219681>,process,<0.940.0>,normal},{'EXIT',<0.922.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48153
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.918.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.918.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.919.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-w1uoXGBxMFfn5emyMQh0Wg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.219688>,process,<0.944.0>,normal},{'EXIT',<0.926.0>,{shutdown,normal}},{'EXIT',<0.796.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48165
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.919.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.796.0>},{id,#Ref<0.2937114680.3119513604.216387>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-woB9S7y0_IwUA9zDjUa_zQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1011.0>,#Ref<0.2937114680.3119513606.219767>},{<0.1010.0>,#Ref<0.2937114680.3119513606.219764>},{<0.1009.0>,#Ref<0.2937114680.3119513606.219762>},{<0.1008.0>,#Ref<0.2937114680.3119513606.219759>},{<0.1007.0>,#Ref<0.2937114680.3119513606.219755>},{<0.1006.0>,#Ref<0.2937114680.3119513604.217152>},{<0.1004.0>,#Ref<0.2937114680.3119513604.217149>},{<0.1002.0>,#Ref<0.2937114680.3119513604.217146>},{<0.1000.0>,#Ref<0.2937114680.3119513607.218283>},{<0.998.0>,#Ref<0.2937114680.3119513604.217144>},{<0.997.0>,#Ref<0.2937114680.3119513605.217186>},{<0.995.0>,#Ref<0.2937114680.3119513605.217184>},{<0.992.0>,#Ref<0.2937114680.3119513604.217137>},{<0.991.0>,#Ref<0.2937114680.3119513605.217180>},{<0.990.0>,#Ref<0.2937114680.3119513605.217176>},{<0.989.0>,#Ref<0.2937114680.3119513605.217173>},{<0.988.0>,#Ref<0.2937114680.3119513607.218279>},{<0.987.0>,#Ref<0.2937114680.3119513607.218276>},{<0.986.0>,#Ref<0.2937114680.3119513607.218273>},{<0.985.0>,#Ref<0.2937114680.3119513607.218270>},{<0.984.0>,#Ref<0.2937114680.3119513607.218268>},{<0.983.0>,#Ref<0.2937114680.3119513607.218264>},{<0.982.0>,#Ref<0.2937114680.3119513607.218262>},{<0.981.0>,#Ref<0.2937114680.3119513607.218258>},{<0.980.0>,#Ref<0.2937114680.3119513607.218256>},{<0.979.0>,#Ref<0.2937114680.3119513607.218253>},{<0.978.0>,#Ref<0.2937114680.3119513607.218249>},{<0.977.0>,#Ref<0.2937114680.3119513607.218247>},{<0.976.0>,#Ref<0.2937114680.3119513607.218243>},{<0.975.0>,#Ref<0.2937114680.3119513606.219748>},{<0.974.0>,#Ref<0.2937114680.3119513606.219745>},{<0.973.0>,#Ref<0.2937114680.3119513605.217092>},{<0.971.0>,#Ref<0.2937114680.3119513605.217089>},{<0.968.0>,#Ref<0.2937114680.3119513605.217087>},{<0.967.0>,#Ref<0.2937114680.3119513607.218227>},{<0.966.0>,#Ref<0.2937114680.3119513605.217078>},{<0.965.0>,#Ref<0.2937114680.3119513607.218220>},{<0.964.0>,#Ref<0.2937114680.3119513607.218217>},{<0.963.0>,#Ref<0.2937114680.3119513607.218213>},{<0.962.0>,#Ref<0.2937114680.3119513607.218210>},{<0.961.0>,#Ref<0.2937114680.3119513607.218208>},{<0.960.0>,#Ref<0.2937114680.3119513607.218204>},{<0.959.0>,#Ref<0.2937114680.3119513607.218201>},{<0.958.0>,#Ref<0.2937114680.3119513607.218199>},{<0.957.0>,#Ref<0.2937114680.3119513605.216994>},{<0.956.0>,#Ref<0.2937114680.3119513607.218193>},{<0.955.0>,#Ref<0.2937114680.3119513607.218188>},{<0.954.0>,#Ref<0.2937114680.3119513607.218183>},{<0.953.0>,#Ref<0.2937114680.3119513607.218179>},{<0.952.0>,#Ref<0.2937114680.3119513607.218176>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[222827260472488457|137364396873398702]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.972.0>},custom_consumer => nil,pid => <0.1035.0>},channel_ref => #Ref<0.2937114680.3119513607.218334>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-woB9S7y0_IwUA9zDjUa_zQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-hSIXNexct7KCtf5xiWuKJw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1011.0>,#Ref<0.2937114680.3119513606.219768>},{<0.1010.0>,#Ref<0.2937114680.3119513606.219765>},{<0.1009.0>,#Ref<0.2937114680.3119513606.219761>},{<0.1008.0>,#Ref<0.2937114680.3119513606.219758>},{<0.1007.0>,#Ref<0.2937114680.3119513606.219756>},{<0.1006.0>,#Ref<0.2937114680.3119513604.217153>},{<0.1004.0>,#Ref<0.2937114680.3119513604.217150>},{<0.1002.0>,#Ref<0.2937114680.3119513604.217147>},{<0.1000.0>,#Ref<0.2937114680.3119513607.218284>},{<0.998.0>,#Ref<0.2937114680.3119513604.217143>},{<0.997.0>,#Ref<0.2937114680.3119513605.217187>},{<0.995.0>,#Ref<0.2937114680.3119513605.217183>},{<0.992.0>,#Ref<0.2937114680.3119513604.217136>},{<0.991.0>,#Ref<0.2937114680.3119513605.217179>},{<0.990.0>,#Ref<0.2937114680.3119513605.217177>},{<0.989.0>,#Ref<0.2937114680.3119513605.217174>},{<0.988.0>,#Ref<0.2937114680.3119513607.218280>},{<0.987.0>,#Ref<0.2937114680.3119513607.218277>},{<0.986.0>,#Ref<0.2937114680.3119513607.218274>},{<0.985.0>,#Ref<0.2937114680.3119513607.218271>},{<0.984.0>,#Ref<0.2937114680.3119513607.218267>},{<0.983.0>,#Ref<0.2937114680.3119513607.218265>},{<0.982.0>,#Ref<0.2937114680.3119513607.218261>},{<0.981.0>,#Ref<0.2937114680.3119513607.218259>},{<0.980.0>,#Ref<0.2937114680.3119513607.218255>},{<0.979.0>,#Ref<0.2937114680.3119513607.218252>},{<0.978.0>,#Ref<0.2937114680.3119513607.218250>},{<0.977.0>,#Ref<0.2937114680.3119513607.218246>},{<0.976.0>,#Ref<0.2937114680.3119513607.218244>},{<0.975.0>,#Ref<0.2937114680.3119513606.219749>},{<0.974.0>,#Ref<0.2937114680.3119513606.219746>},{<0.973.0>,#Ref<0.2937114680.3119513605.217093>},{<0.971.0>,#Ref<0.2937114680.3119513605.217090>},{<0.968.0>,#Ref<0.2937114680.3119513605.217086>},{<0.967.0>,#Ref<0.2937114680.3119513607.218226>},{<0.966.0>,#Ref<0.2937114680.3119513605.217079>},{<0.965.0>,#Ref<0.2937114680.3119513607.218219>},{<0.964.0>,#Ref<0.2937114680.3119513607.218216>},{<0.963.0>,#Ref<0.2937114680.3119513607.218214>},{<0.962.0>,#Ref<0.2937114680.3119513607.218211>},{<0.961.0>,#Ref<0.2937114680.3119513607.218207>},{<0.960.0>,#Ref<0.2937114680.3119513607.218205>},{<0.959.0>,#Ref<0.2937114680.3119513607.218202>},{<0.958.0>,#Ref<0.2937114680.3119513607.218198>},{<0.957.0>,#Ref<0.2937114680.3119513605.216995>},{<0.956.0>,#Ref<0.2937114680.3119513607.218192>},{<0.955.0>,#Ref<0.2937114680.3119513607.218187>},{<0.954.0>,#Ref<0.2937114680.3119513607.218184>},{<0.953.0>,#Ref<0.2937114680.3119513607.218180>},{<0.952.0>,#Ref<0.2937114680.3119513607.218175>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[251685007682040294|108519642537987174]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.996.0>},custom_consumer => nil,pid => <0.1034.0>},channel_ref => #Ref<0.2937114680.3119513604.217186>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-hSIXNexct7KCtf5xiWuKJw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.949.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-woB9S7y0_IwUA9zDjUa_zQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513607.218334>,process,<0.1035.0>,normal},{'EXIT',<0.972.0>,{shutdown,normal}}]
    links: [<0.948.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 64828
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.949.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.950.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-hSIXNexct7KCtf5xiWuKJw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513604.217186>,process,<0.1034.0>,normal},{'EXIT',<0.996.0>,{shutdown,normal}}]
    links: [<0.948.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65348
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.950.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-098zN8NrveIDuIcMXqPy3A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[174973351081061107|257375289476021859]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1044.0>},custom_consumer => nil,pid => <0.1064.0>},channel_ref => #Ref<0.2937114680.3119513606.219986>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-098zN8NrveIDuIcMXqPy3A">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Wx1wZtOFBvTL874wsu-B6w">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[191450877638615442|240920360154075623]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1047.0>},custom_consumer => nil,pid => <0.1065.0>},channel_ref => #Ref<0.2937114680.3119513606.219993>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-Wx1wZtOFBvTL874wsu-B6w">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1040.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-098zN8NrveIDuIcMXqPy3A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.219986>,process,<0.1064.0>,normal},{'EXIT',<0.1044.0>,{shutdown,normal}}]
    links: [<0.948.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48159
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1040.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1041.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Wx1wZtOFBvTL874wsu-B6w">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513606.219993>,process,<0.1065.0>,normal},{'EXIT',<0.1047.0>,{shutdown,normal}}]
    links: [<0.948.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48146
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1041.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-CyTwuIqoBLy-x0UYS0HbLQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[135246167682286350|8934404760049072]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1077.0>},custom_consumer => nil,pid => <0.1096.0>},channel_ref => #Ref<0.2937114680.3119513605.217586>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-CyTwuIqoBLy-x0UYS0HbLQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-h2FvWkWpbuA-agqcUYXTqQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[35726284399004011|108409497445249549]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1074.0>},custom_consumer => nil,pid => <0.1092.0>},channel_ref => #Ref<0.2937114680.3119513602.221002>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-h2FvWkWpbuA-agqcUYXTqQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1071.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-CyTwuIqoBLy-x0UYS0HbLQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.217586>,process,<0.1096.0>,normal},{'EXIT',<0.1077.0>,{shutdown,normal}}]
    links: [<0.948.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48146
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1071.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.1071.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1070.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-h2FvWkWpbuA-agqcUYXTqQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513602.221002>,process,<0.1092.0>,normal},{'EXIT',<0.1074.0>,{shutdown,normal}},{'EXIT',<0.948.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48160
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1070.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.948.0>},{id,#Ref<0.2937114680.3119513604.216387>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-JclvwkNxEGDp-u1KPOjplA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1167.0>,#Ref<0.2937114680.3119513606.220393>},{<0.1166.0>,#Ref<0.2937114680.3119513605.217997>},{<0.1165.0>,#Ref<0.2937114680.3119513606.220389>},{<0.1164.0>,#Ref<0.2937114680.3119513605.217994>},{<0.1163.0>,#Ref<0.2937114680.3119513606.220387>},{<0.1162.0>,#Ref<0.2937114680.3119513605.217992>},{<0.1161.0>,#Ref<0.2937114680.3119513606.220383>},{<0.1160.0>,#Ref<0.2937114680.3119513605.217988>},{<0.1159.0>,#Ref<0.2937114680.3119513606.220380>},{<0.1158.0>,#Ref<0.2937114680.3119513605.217985>},{<0.1157.0>,#Ref<0.2937114680.3119513606.220378>},{<0.1156.0>,#Ref<0.2937114680.3119513605.217982>},{<0.1155.0>,#Ref<0.2937114680.3119513606.220374>},{<0.1154.0>,#Ref<0.2937114680.3119513605.217979>},{<0.1153.0>,#Ref<0.2937114680.3119513605.217977>},{<0.1150.0>,#Ref<0.2937114680.3119513605.217973>},{<0.1148.0>,#Ref<0.2937114680.3119513605.217970>},{<0.1146.0>,#Ref<0.2937114680.3119513605.217967>},{<0.1145.0>,#Ref<0.2937114680.3119513605.217965>},{<0.1144.0>,#Ref<0.2937114680.3119513605.217961>},{<0.1143.0>,#Ref<0.2937114680.3119513605.217958>},{<0.1142.0>,#Ref<0.2937114680.3119513605.217956>},{<0.1141.0>,#Ref<0.2937114680.3119513606.220365>},{<0.1140.0>,#Ref<0.2937114680.3119513605.217953>},{<0.1139.0>,#Ref<0.2937114680.3119513605.217949>},{<0.1138.0>,#Ref<0.2937114680.3119513605.217946>},{<0.1137.0>,#Ref<0.2937114680.3119513606.220361>},{<0.1136.0>,#Ref<0.2937114680.3119513605.217942>},{<0.1135.0>,#Ref<0.2937114680.3119513605.217940>},{<0.1134.0>,#Ref<0.2937114680.3119513606.220359>},{<0.1133.0>,#Ref<0.2937114680.3119513606.220356>},{<0.1132.0>,#Ref<0.2937114680.3119513606.220352>},{<0.1131.0>,#Ref<0.2937114680.3119513605.217933>},{<0.1128.0>,#Ref<0.2937114680.3119513606.220350>},{<0.1125.0>,#Ref<0.2937114680.3119513605.217929>},{<0.1122.0>,#Ref<0.2937114680.3119513605.217926>},{<0.1121.0>,#Ref<0.2937114680.3119513605.217923>},{<0.1119.0>,#Ref<0.2937114680.3119513605.217919>},{<0.1118.0>,#Ref<0.2937114680.3119513605.217915>},{<0.1117.0>,#Ref<0.2937114680.3119513605.217913>},{<0.1116.0>,#Ref<0.2937114680.3119513605.217909>},{<0.1115.0>,#Ref<0.2937114680.3119513605.217907>},{<0.1114.0>,#Ref<0.2937114680.3119513605.217901>},{<0.1113.0>,#Ref<0.2937114680.3119513605.217899>},{<0.1112.0>,#Ref<0.2937114680.3119513605.217895>},{<0.1111.0>,#Ref<0.2937114680.3119513605.217893>},{<0.1110.0>,#Ref<0.2937114680.3119513607.218425>},{<0.1109.0>,#Ref<0.2937114680.3119513606.220203>},{<0.1108.0>,#Ref<0.2937114680.3119513607.218422>},{<0.1107.0>,#Ref<0.2937114680.3119513607.218418>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[53060443332022200|90999241007536073]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1106.0>},custom_consumer => nil,pid => <0.1188.0>},channel_ref => #Ref<0.2937114680.3119513605.218059>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-JclvwkNxEGDp-u1KPOjplA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-kraf7gvqQjk_xDrINslQmg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1167.0>,#Ref<0.2937114680.3119513606.220392>},{<0.1166.0>,#Ref<0.2937114680.3119513605.217998>},{<0.1165.0>,#Ref<0.2937114680.3119513606.220390>},{<0.1164.0>,#Ref<0.2937114680.3119513605.217995>},{<0.1163.0>,#Ref<0.2937114680.3119513606.220386>},{<0.1162.0>,#Ref<0.2937114680.3119513605.217991>},{<0.1161.0>,#Ref<0.2937114680.3119513606.220384>},{<0.1160.0>,#Ref<0.2937114680.3119513605.217989>},{<0.1159.0>,#Ref<0.2937114680.3119513606.220381>},{<0.1158.0>,#Ref<0.2937114680.3119513605.217986>},{<0.1157.0>,#Ref<0.2937114680.3119513606.220377>},{<0.1156.0>,#Ref<0.2937114680.3119513605.217983>},{<0.1155.0>,#Ref<0.2937114680.3119513606.220375>},{<0.1154.0>,#Ref<0.2937114680.3119513605.217980>},{<0.1153.0>,#Ref<0.2937114680.3119513605.217976>},{<0.1150.0>,#Ref<0.2937114680.3119513605.217974>},{<0.1148.0>,#Ref<0.2937114680.3119513605.217971>},{<0.1146.0>,#Ref<0.2937114680.3119513605.217968>},{<0.1145.0>,#Ref<0.2937114680.3119513605.217964>},{<0.1144.0>,#Ref<0.2937114680.3119513605.217962>},{<0.1143.0>,#Ref<0.2937114680.3119513605.217959>},{<0.1142.0>,#Ref<0.2937114680.3119513605.217955>},{<0.1141.0>,#Ref<0.2937114680.3119513606.220366>},{<0.1140.0>,#Ref<0.2937114680.3119513605.217952>},{<0.1139.0>,#Ref<0.2937114680.3119513605.217950>},{<0.1138.0>,#Ref<0.2937114680.3119513605.217947>},{<0.1137.0>,#Ref<0.2937114680.3119513606.220362>},{<0.1136.0>,#Ref<0.2937114680.3119513605.217943>},{<0.1135.0>,#Ref<0.2937114680.3119513605.217939>},{<0.1134.0>,#Ref<0.2937114680.3119513606.220358>},{<0.1133.0>,#Ref<0.2937114680.3119513606.220355>},{<0.1132.0>,#Ref<0.2937114680.3119513606.220353>},{<0.1131.0>,#Ref<0.2937114680.3119513605.217934>},{<0.1128.0>,#Ref<0.2937114680.3119513606.220349>},{<0.1125.0>,#Ref<0.2937114680.3119513605.217928>},{<0.1122.0>,#Ref<0.2937114680.3119513605.217925>},{<0.1121.0>,#Ref<0.2937114680.3119513605.217922>},{<0.1119.0>,#Ref<0.2937114680.3119513605.217920>},{<0.1118.0>,#Ref<0.2937114680.3119513605.217916>},{<0.1117.0>,#Ref<0.2937114680.3119513605.217912>},{<0.1116.0>,#Ref<0.2937114680.3119513605.217910>},{<0.1115.0>,#Ref<0.2937114680.3119513605.217906>},{<0.1114.0>,#Ref<0.2937114680.3119513605.217902>},{<0.1113.0>,#Ref<0.2937114680.3119513605.217898>},{<0.1112.0>,#Ref<0.2937114680.3119513605.217896>},{<0.1111.0>,#Ref<0.2937114680.3119513605.217892>},{<0.1110.0>,#Ref<0.2937114680.3119513607.218424>},{<0.1109.0>,#Ref<0.2937114680.3119513606.220202>},{<0.1108.0>,#Ref<0.2937114680.3119513607.218421>},{<0.1107.0>,#Ref<0.2937114680.3119513607.218419>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[45320699872677070|170757100978526258]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1130.0>},custom_consumer => nil,pid => <0.1184.0>},channel_ref => #Ref<0.2937114680.3119513605.218065>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-kraf7gvqQjk_xDrINslQmg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1101.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-JclvwkNxEGDp-u1KPOjplA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.218059>,process,<0.1188.0>,normal},{'EXIT',<0.1106.0>,{shutdown,normal}}]
    links: [<0.1100.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 65124
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1101.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1102.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-kraf7gvqQjk_xDrINslQmg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.218065>,process,<0.1184.0>,normal},{'EXIT',<0.1130.0>,{shutdown,normal}}]
    links: [<0.1100.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 65229
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1102.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-bmIjVbpkejK2kWiglsk7jw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[53102019347559789|91025697810599205]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1199.0>},custom_consumer => nil,pid => <0.1214.0>},channel_ref => #Ref<0.2937114680.3119513605.218449>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-bmIjVbpkejK2kWiglsk7jw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-J27xXA9KF4q4q5GQoFu5CQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[223505972085664671|280883236761545979]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1196.0>},custom_consumer => nil,pid => <0.1218.0>},channel_ref => #Ref<0.2937114680.3119513606.220622>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-J27xXA9KF4q4q5GQoFu5CQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1193.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-bmIjVbpkejK2kWiglsk7jw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.218449>,process,<0.1214.0>,normal},{'EXIT',<0.1199.0>,{shutdown,normal}}]
    links: [<0.1100.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48150
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1193.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1192.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 2
    messages: [{'DOWN',#Ref<0.2937114680.3119513606.220622>,process,<0.1218.0>,normal},{'EXIT',<0.1196.0>,{shutdown,normal}}]
    links: [<0.1100.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48136
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1192.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-oSamyKGBcc-Rdh0fKPWWhQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[283496593633413918|4691646578146951]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1226.0>},custom_consumer => nil,pid => <0.1244.0>},channel_ref => #Ref<0.2937114680.3119513605.218548>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-oSamyKGBcc-Rdh0fKPWWhQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-zCDwT7JXvjohR9mI_rj6QA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[268324507939539485|163973172826144387]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1230.0>},custom_consumer => nil,pid => <0.1248.0>},channel_ref => #Ref<0.2937114680.3119513605.218555>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-zCDwT7JXvjohR9mI_rj6QA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1222.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-oSamyKGBcc-Rdh0fKPWWhQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.218548>,process,<0.1244.0>,normal},{'EXIT',<0.1226.0>,{shutdown,normal}}]
    links: [<0.1100.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48159
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1222.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.1222.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.1223.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-zCDwT7JXvjohR9mI_rj6QA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2937114680.3119513605.218555>,process,<0.1248.0>,normal},{'EXIT',<0.1230.0>,{shutdown,normal}},{'EXIT',<0.1100.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 48158
  neighbours:
2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.1223.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.1100.0>},{id,#Ref<0.2937114680.3119513604.216387>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.1100.0>},{id,#Ref<0.2937114680.3119513604.216387>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:50:49 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.642.0>},{id,'Elixir.Example.Pipeline'},{mfargs,{'Elixir.Example.Pipeline',start_link,[[]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,worker}]

2021-08-07 17:50:49 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-cWeCYeFSL9EUUceaebS6rQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.1319.0>,#Ref<0.2937114680.3119513606.221019>},{<0.1316.0>,#Ref<0.2937114680.3119513607.218799>},{<0.1315.0>,#Ref<0.2937114680.3119513607.218796>},{<0.1314.0>,#Ref<0.2937114680.3119513607.218794>},{<0.1313.0>,#Ref<0.2937114680.3119513606.221017>},{<0.1312.0>,#Ref<0.2937114680.3119513606.221013>},{<0.1311.0>,#Ref<0.2937114680.3119513606.221010>},{<0.1310.0>,#Ref<0.2937114680.3119513606.221008>},{<0.1309.0>,#Ref<0.2937114680.3119513606.221005>},{<0.1308.0>,#Ref<0.2937114680.3119513606.221001>},{<0.1307.0>,#Ref<0.2937114680.3119513606.220999>},{<0.1306.0>,#Ref<0.2937114680.3119513606.220995>},{<0.1305.0>,#Ref<0.2937114680.3119513606.220992>},{<0.1304.0>,#Ref<0.2937114680.3119513606.220989>},{<0.1303.0>,#Ref<0.2937114680.3119513606.220986>},{<0.1302.0>,#Ref<0.2937114680.3119513602.221445>},{<0.1300.0>,#Ref<0.2937114680.3119513602.221442>},{<0.1297.0>,#Ref<0.2937114680.3119513602.221440>},{<0.1296.0>,#Ref<0.2937114680.3119513602.221436>},{<0.1295.0>,#Ref<0.2937114680.3119513602.221434>},{<0.1294.0>,#Ref<0.2937114680.3119513607.218791>},{<0.1293.0>,#Ref<0.2937114680.3119513606.220965>},{<0.1292.0>,#Ref<0.2937114680.3119513607.218784>},{<0.1291.0>,#Ref<0.2937114680.3119513602.221429>},{<0.1290.0>,#Ref<0.2937114680.3119513602.221425>},{<0.1287.0>,#Ref<0.2937114680.3119513602.221423>},{<0.1286.0>,#Ref<0.2937114680.3119513606.220951>},{<0.1284.0>,#Ref<0.2937114680.3119513607.218760>},{<0.1282.0>,#Ref<0.2937114680.3119513605.218655>},{<0.1281.0>,#Ref<0.2937114680.3119513605.218653>},{<0.1280.0>,#Ref<0.2937114680.3119513606.220931>},{<0.1279.0>,#Ref<0.2937114680.3119513605.218648>},{<0.1278.0>,#Ref<0.2937114680.3119513607.218745>},{<0.1277.0>,#Ref<0.2937114680.3119513607.218742>},{<0.1276.0>,#Ref<0.2937114680.3119513606.220924>},{<0.1275.0>,#Ref<0.2937114680.3119513606.220921>},{<0.1274.0>,#Ref<0.2937114680.3119513606.220919>},{<0.1273.0>,#Ref<0.2937114680.3119513607.218739>},{<0.1272.0>,#Ref<0.2937114680.3119513607.218735>},{<0.1271.0>,#Ref<0.2937114680.3119513607.218732>},{<0.1270.0>,#Ref<0.2937114680.3119513607.218729>},{<0.1269.0>,#Ref<0.2937114680.3119513605.218613>},{<0.1268.0>,#Ref<0.2937114680.3119513607.218720>},{<0.1267.0>,#Ref<0.2937114680.3119513605.218609>},{<0.1266.0>,#Ref<0.2937114680.3119513607.218716>},{<0.1264.0>,#Ref<0.2937114680.3119513607.218712>},{<0.1261.0>,#Ref<0.2937114680.3119513603.216725>},{<0.1260.0>,#Ref<0.2937114680.3119513603.216721>},{<0.1259.0>,#Ref<0.2937114680.3119513603.216717>},{<0.1258.0>,#Ref<0.2937114680.3119513603.216712>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[241080400911020238|119307423697100449]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.1301.0>},custom_consumer => nil,pid => <0.1338.0>},channel_ref => #Ref<0.2937114680.3119513602.221496>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-cWeCYeFSL9EUUceaebS6rQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-UPpDbb6prIGxUHQcmGIX_Q">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.697.0>,#Ref<0.2670161161.435159043.4078>},{<0.696.0>,#Ref<0.2670161161.435159043.4075>},{<0.695.0>,#Ref<0.2670161161.435159043.4071>},{<0.694.0>,#Ref<0.2670161161.435159043.4068>},{<0.693.0>,#Ref<0.2670161161.435159043.4066>},{<0.692.0>,#Ref<0.2670161161.435159043.4062>},{<0.691.0>,#Ref<0.2670161161.435159043.4059>},{<0.690.0>,#Ref<0.2670161161.435159043.4056>},{<0.689.0>,#Ref<0.2670161161.435159043.4054>},{<0.688.0>,#Ref<0.2670161161.435159043.4050>},{<0.687.0>,#Ref<0.2670161161.435159043.4047>},{<0.686.0>,#Ref<0.2670161161.435159043.4044>},{<0.685.0>,#Ref<0.2670161161.435159043.4041>},{<0.684.0>,#Ref<0.2670161161.435159043.4038>},{<0.683.0>,#Ref<0.2670161161.435159043.4036>},{<0.682.0>,#Ref<0.2670161161.435159043.4032>},{<0.681.0>,#Ref<0.2670161161.435159043.4029>},{<0.680.0>,#Ref<0.2670161161.435159043.4026>},{<0.679.0>,#Ref<0.2670161161.435159043.4023>},{<0.678.0>,#Ref<0.2670161161.435159043.4021>},{<0.677.0>,#Ref<0.2670161161.435159042.4774>},{<0.676.0>,#Ref<0.2670161161.435159042.4772>},{<0.675.0>,#Ref<0.2670161161.435159043.4018>},{<0.674.0>,#Ref<0.2670161161.435159043.4014>},{<0.673.0>,#Ref<0.2670161161.435159043.4012>},{<0.672.0>,#Ref<0.2670161161.435159043.4009>},{<0.671.0>,#Ref<0.2670161161.435159043.4006>},{<0.670.0>,#Ref<0.2670161161.435159043.4003>},{<0.669.0>,#Ref<0.2670161161.435159043.3999>},{<0.668.0>,#Ref<0.2670161161.435159043.3997>},{<0.667.0>,#Ref<0.2670161161.435159043.3993>},{<0.666.0>,#Ref<0.2670161161.435159043.3990>},{<0.665.0>,#Ref<0.2670161161.435159043.3988>},{<0.664.0>,#Ref<0.2670161161.435159043.3985>},{<0.663.0>,#Ref<0.2670161161.435159043.3981>},{<0.662.0>,#Ref<0.2670161161.435159043.3978>},{<0.661.0>,#Ref<0.2670161161.435159043.3976>},{<0.660.0>,#Ref<0.2670161161.435159043.3972>},{<0.659.0>,#Ref<0.2670161161.435159043.3969>},{<0.658.0>,#Ref<0.2670161161.435159043.3967>},{<0.657.0>,#Ref<0.2670161161.435159043.3964>},{<0.656.0>,#Ref<0.2670161161.435159043.3961>},{<0.655.0>,#Ref<0.2670161161.435159042.4769>},{<0.654.0>,#Ref<0.2670161161.435159043.3924>},{<0.653.0>,#Ref<0.2670161161.435159043.3920>},{<0.652.0>,#Ref<0.2670161161.435159043.3915>},{<0.651.0>,#Ref<0.2670161161.435159043.3910>},{<0.650.0>,#Ref<0.2670161161.435159043.3906>},{<0.649.0>,#Ref<0.2670161161.435159043.3902>},{<0.648.0>,#Ref<0.2670161161.435159043.3898>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[4513804855026184|139553319178199689]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.713.0>},custom_consumer => nil,pid => <0.731.0>},channel_ref => #Ref<0.2670161161.435159041.9421>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-UPpDbb6prIGxUHQcmGIX_Q">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-3FUToIHiUIJiATSXS4qUPQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.697.0>,#Ref<0.2670161161.435159043.4077>},{<0.696.0>,#Ref<0.2670161161.435159043.4074>},{<0.695.0>,#Ref<0.2670161161.435159043.4072>},{<0.694.0>,#Ref<0.2670161161.435159043.4069>},{<0.693.0>,#Ref<0.2670161161.435159043.4065>},{<0.692.0>,#Ref<0.2670161161.435159043.4063>},{<0.691.0>,#Ref<0.2670161161.435159043.4060>},{<0.690.0>,#Ref<0.2670161161.435159043.4057>},{<0.689.0>,#Ref<0.2670161161.435159043.4053>},{<0.688.0>,#Ref<0.2670161161.435159043.4051>},{<0.687.0>,#Ref<0.2670161161.435159043.4048>},{<0.686.0>,#Ref<0.2670161161.435159043.4045>},{<0.685.0>,#Ref<0.2670161161.435159043.4042>},{<0.684.0>,#Ref<0.2670161161.435159043.4039>},{<0.683.0>,#Ref<0.2670161161.435159043.4035>},{<0.682.0>,#Ref<0.2670161161.435159043.4033>},{<0.681.0>,#Ref<0.2670161161.435159043.4030>},{<0.680.0>,#Ref<0.2670161161.435159043.4027>},{<0.679.0>,#Ref<0.2670161161.435159043.4024>},{<0.678.0>,#Ref<0.2670161161.435159043.4020>},{<0.677.0>,#Ref<0.2670161161.435159042.4775>},{<0.676.0>,#Ref<0.2670161161.435159042.4771>},{<0.675.0>,#Ref<0.2670161161.435159043.4017>},{<0.674.0>,#Ref<0.2670161161.435159043.4015>},{<0.673.0>,#Ref<0.2670161161.435159043.4011>},{<0.672.0>,#Ref<0.2670161161.435159043.4008>},{<0.671.0>,#Ref<0.2670161161.435159043.4005>},{<0.670.0>,#Ref<0.2670161161.435159043.4002>},{<0.669.0>,#Ref<0.2670161161.435159043.4000>},{<0.668.0>,#Ref<0.2670161161.435159043.3996>},{<0.667.0>,#Ref<0.2670161161.435159043.3994>},{<0.666.0>,#Ref<0.2670161161.435159043.3991>},{<0.665.0>,#Ref<0.2670161161.435159043.3987>},{<0.664.0>,#Ref<0.2670161161.435159043.3984>},{<0.663.0>,#Ref<0.2670161161.435159043.3982>},{<0.662.0>,#Ref<0.2670161161.435159043.3979>},{<0.661.0>,#Ref<0.2670161161.435159043.3975>},{<0.660.0>,#Ref<0.2670161161.435159043.3973>},{<0.659.0>,#Ref<0.2670161161.435159043.3970>},{<0.658.0>,#Ref<0.2670161161.435159043.3966>},{<0.657.0>,#Ref<0.2670161161.435159043.3963>},{<0.656.0>,#Ref<0.2670161161.435159043.3960>},{<0.655.0>,#Ref<0.2670161161.435159042.4768>},{<0.654.0>,#Ref<0.2670161161.435159043.3923>},{<0.653.0>,#Ref<0.2670161161.435159043.3919>},{<0.652.0>,#Ref<0.2670161161.435159043.3914>},{<0.651.0>,#Ref<0.2670161161.435159043.3911>},{<0.650.0>,#Ref<0.2670161161.435159043.3907>},{<0.649.0>,#Ref<0.2670161161.435159043.3903>},{<0.648.0>,#Ref<0.2670161161.435159043.3899>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[6971872772184953|137085231414549950]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.710.0>},custom_consumer => nil,pid => <0.730.0>},channel_ref => #Ref<0.2670161161.435159042.4906>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-3FUToIHiUIJiATSXS4qUPQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.645.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-UPpDbb6prIGxUHQcmGIX_Q">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159041.9421>,process,<0.731.0>,normal},{'EXIT',<0.713.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 70040
  neighbours:
2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.646.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-3FUToIHiUIJiATSXS4qUPQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159042.4906>,process,<0.730.0>,normal},{'EXIT',<0.710.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65458
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.645.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.646.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Ql2_Imm00zAGCvU6itIiFQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[80985029900320063|63181722952848000]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.740.0>},custom_consumer => nil,pid => <0.762.0>},channel_ref => #Ref<0.2670161161.435159042.5063>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-Ql2_Imm00zAGCvU6itIiFQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-CCv9O5xT2xGPxdYKwlhhfA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[198801672149086562|161470175215109387]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.743.0>},custom_consumer => nil,pid => <0.758.0>},channel_ref => #Ref<0.2670161161.435159046.3315>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-CCv9O5xT2xGPxdYKwlhhfA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.736.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-Ql2_Imm00zAGCvU6itIiFQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159042.5063>,process,<0.762.0>,normal},{'EXIT',<0.740.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 47876
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.736.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.737.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-CCv9O5xT2xGPxdYKwlhhfA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159046.3315>,process,<0.758.0>,normal},{'EXIT',<0.743.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 47875
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.737.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-C0o6Uu_5G4Kjxcgi2m4OFg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[57798905741941032|14275821706575824]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.770.0>},custom_consumer => nil,pid => <0.788.0>},channel_ref => #Ref<0.2670161161.435159042.5208>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-C0o6Uu_5G4Kjxcgi2m4OFg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-7-f-s3pHIqWis2GVwXabyA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[216242255110530973|144002372541009886]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.773.0>},custom_consumer => nil,pid => <0.792.0>},channel_ref => #Ref<0.2670161161.435159043.4414>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-7-f-s3pHIqWis2GVwXabyA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.766.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-C0o6Uu_5G4Kjxcgi2m4OFg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159042.5208>,process,<0.788.0>,normal},{'EXIT',<0.770.0>,{shutdown,normal}}]
    links: [<0.644.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 47868
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.766.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.766.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.767.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-7-f-s3pHIqWis2GVwXabyA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159043.4414>,process,<0.792.0>,normal},{'EXIT',<0.773.0>,{shutdown,normal}},{'EXIT',<0.644.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 47872
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.767.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.644.0>},{id,#Ref<0.2670161161.435159042.4630>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-EO6Jm007gDWRZHqRjt1QJw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.859.0>,#Ref<0.2670161161.435159042.5467>},{<0.858.0>,#Ref<0.2670161161.435159042.5464>},{<0.857.0>,#Ref<0.2670161161.435159042.5461>},{<0.856.0>,#Ref<0.2670161161.435159042.5457>},{<0.855.0>,#Ref<0.2670161161.435159042.5455>},{<0.854.0>,#Ref<0.2670161161.435159046.3867>},{<0.853.0>,#Ref<0.2670161161.435159046.3863>},{<0.852.0>,#Ref<0.2670161161.435159046.3860>},{<0.851.0>,#Ref<0.2670161161.435159046.3857>},{<0.850.0>,#Ref<0.2670161161.435159045.4150>},{<0.849.0>,#Ref<0.2670161161.435159045.4147>},{<0.848.0>,#Ref<0.2670161161.435159045.4144>},{<0.847.0>,#Ref<0.2670161161.435159045.4140>},{<0.846.0>,#Ref<0.2670161161.435159045.4138>},{<0.845.0>,#Ref<0.2670161161.435159042.5451>},{<0.844.0>,#Ref<0.2670161161.435159042.5448>},{<0.843.0>,#Ref<0.2670161161.435159042.5446>},{<0.842.0>,#Ref<0.2670161161.435159042.5443>},{<0.841.0>,#Ref<0.2670161161.435159042.5439>},{<0.840.0>,#Ref<0.2670161161.435159042.5437>},{<0.838.0>,#Ref<0.2670161161.435159042.5433>},{<0.837.0>,#Ref<0.2670161161.435159042.5431>},{<0.836.0>,#Ref<0.2670161161.435159042.5428>},{<0.833.0>,#Ref<0.2670161161.435159042.5424>},{<0.832.0>,#Ref<0.2670161161.435159043.4485>},{<0.831.0>,#Ref<0.2670161161.435159046.3840>},{<0.830.0>,#Ref<0.2670161161.435159043.4483>},{<0.829.0>,#Ref<0.2670161161.435159042.5406>},{<0.828.0>,#Ref<0.2670161161.435159042.5402>},{<0.827.0>,#Ref<0.2670161161.435159043.4479>},{<0.826.0>,#Ref<0.2670161161.435159046.3811>},{<0.825.0>,#Ref<0.2670161161.435159046.3808>},{<0.823.0>,#Ref<0.2670161161.435159046.3804>},{<0.821.0>,#Ref<0.2670161161.435159046.3800>},{<0.819.0>,#Ref<0.2670161161.435159046.3797>},{<0.817.0>,#Ref<0.2670161161.435159046.3793>},{<0.816.0>,#Ref<0.2670161161.435159046.3789>},{<0.815.0>,#Ref<0.2670161161.435159044.3374>},{<0.814.0>,#Ref<0.2670161161.435159044.3371>},{<0.813.0>,#Ref<0.2670161161.435159044.3368>},{<0.812.0>,#Ref<0.2670161161.435159044.3366>},{<0.811.0>,#Ref<0.2670161161.435159042.5292>},{<0.810.0>,#Ref<0.2670161161.435159046.3781>},{<0.809.0>,#Ref<0.2670161161.435159042.5287>},{<0.808.0>,#Ref<0.2670161161.435159042.5285>},{<0.807.0>,#Ref<0.2670161161.435159042.5282>},{<0.806.0>,#Ref<0.2670161161.435159043.4471>},{<0.805.0>,#Ref<0.2670161161.435159044.3352>},{<0.804.0>,#Ref<0.2670161161.435159044.3349>},{<0.802.0>,#Ref<0.2670161161.435159044.3346>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[103065497248903817|185115451304027615]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.803.0>},custom_consumer => nil,pid => <0.880.0>},channel_ref => #Ref<0.2670161161.435159046.3928>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-EO6Jm007gDWRZHqRjt1QJw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-F6O7VIhsV-LKuqO5RWVYaA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.859.0>,#Ref<0.2670161161.435159042.5466>},{<0.858.0>,#Ref<0.2670161161.435159042.5463>},{<0.857.0>,#Ref<0.2670161161.435159042.5460>},{<0.856.0>,#Ref<0.2670161161.435159042.5458>},{<0.855.0>,#Ref<0.2670161161.435159042.5454>},{<0.854.0>,#Ref<0.2670161161.435159046.3866>},{<0.853.0>,#Ref<0.2670161161.435159046.3864>},{<0.852.0>,#Ref<0.2670161161.435159046.3861>},{<0.851.0>,#Ref<0.2670161161.435159046.3858>},{<0.850.0>,#Ref<0.2670161161.435159045.4149>},{<0.849.0>,#Ref<0.2670161161.435159045.4146>},{<0.848.0>,#Ref<0.2670161161.435159045.4143>},{<0.847.0>,#Ref<0.2670161161.435159045.4141>},{<0.846.0>,#Ref<0.2670161161.435159045.4137>},{<0.845.0>,#Ref<0.2670161161.435159042.5452>},{<0.844.0>,#Ref<0.2670161161.435159042.5449>},{<0.843.0>,#Ref<0.2670161161.435159042.5445>},{<0.842.0>,#Ref<0.2670161161.435159042.5442>},{<0.841.0>,#Ref<0.2670161161.435159042.5440>},{<0.840.0>,#Ref<0.2670161161.435159042.5436>},{<0.838.0>,#Ref<0.2670161161.435159042.5434>},{<0.837.0>,#Ref<0.2670161161.435159042.5430>},{<0.836.0>,#Ref<0.2670161161.435159042.5427>},{<0.833.0>,#Ref<0.2670161161.435159042.5425>},{<0.832.0>,#Ref<0.2670161161.435159043.4486>},{<0.831.0>,#Ref<0.2670161161.435159046.3839>},{<0.830.0>,#Ref<0.2670161161.435159043.4482>},{<0.829.0>,#Ref<0.2670161161.435159042.5405>},{<0.828.0>,#Ref<0.2670161161.435159042.5403>},{<0.827.0>,#Ref<0.2670161161.435159043.4480>},{<0.826.0>,#Ref<0.2670161161.435159046.3812>},{<0.825.0>,#Ref<0.2670161161.435159046.3809>},{<0.823.0>,#Ref<0.2670161161.435159046.3805>},{<0.821.0>,#Ref<0.2670161161.435159046.3801>},{<0.819.0>,#Ref<0.2670161161.435159046.3796>},{<0.817.0>,#Ref<0.2670161161.435159046.3792>},{<0.816.0>,#Ref<0.2670161161.435159046.3788>},{<0.815.0>,#Ref<0.2670161161.435159044.3375>},{<0.814.0>,#Ref<0.2670161161.435159044.3372>},{<0.813.0>,#Ref<0.2670161161.435159044.3369>},{<0.812.0>,#Ref<0.2670161161.435159044.3365>},{<0.811.0>,#Ref<0.2670161161.435159042.5291>},{<0.810.0>,#Ref<0.2670161161.435159046.3782>},{<0.809.0>,#Ref<0.2670161161.435159042.5288>},{<0.808.0>,#Ref<0.2670161161.435159042.5284>},{<0.807.0>,#Ref<0.2670161161.435159042.5281>},{<0.806.0>,#Ref<0.2670161161.435159043.4472>},{<0.805.0>,#Ref<0.2670161161.435159044.3353>},{<0.804.0>,#Ref<0.2670161161.435159044.3350>},{<0.802.0>,#Ref<0.2670161161.435159044.3347>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[29497873079460578|258759106741171430]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.839.0>},custom_consumer => nil,pid => <0.884.0>},channel_ref => #Ref<0.2670161161.435159046.3934>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-F6O7VIhsV-LKuqO5RWVYaA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.797.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-EO6Jm007gDWRZHqRjt1QJw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159046.3928>,process,<0.880.0>,normal},{'EXIT',<0.803.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 64610
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.797.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.798.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-F6O7VIhsV-LKuqO5RWVYaA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159046.3934>,process,<0.884.0>,normal},{'EXIT',<0.839.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65076
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.798.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-m9nZdfyoLDg5pZ1khs2TIg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[110379714446492534|177791672882655972]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.895.0>},custom_consumer => nil,pid => <0.910.0>},channel_ref => #Ref<0.2670161161.435159046.4350>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-m9nZdfyoLDg5pZ1khs2TIg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-DLR3AJ5JnRVPqtgz_SJofA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[260974917460737416|27209059020751229]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.892.0>},custom_consumer => nil,pid => <0.914.0>},channel_ref => #Ref<0.2670161161.435159044.3587>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-DLR3AJ5JnRVPqtgz_SJofA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.889.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-m9nZdfyoLDg5pZ1khs2TIg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159046.4350>,process,<0.910.0>,normal},{'EXIT',<0.895.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 47878
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.889.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.888.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.483.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-DLR3AJ5JnRVPqtgz_SJofA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.2670161161.435159044.3587>,process,<0.914.0>,normal},{'EXIT',<0.892.0>,{shutdown,normal}}]
    links: [<0.796.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 47874
  neighbours:
2021-08-07 17:51:26 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.888.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:51:26 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-OHQFwkixI7IMmg7KTkajDg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[88980362831593730|271264620120713746]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.922.0>},custom_consumer => nil,pid => <0.940.0>},channel_ref => #Ref<0.2670161161.435159046.4552>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-OHQFwkixI7IMmg7KTkajDg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-VUG1oi0tWbB5wbIszbC-Ww">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.707.0>,#Ref<0.1951712407.4194041860.179793>},{<0.706.0>,#Ref<0.1951712407.4194041860.179790>},{<0.705.0>,#Ref<0.1951712407.4194041860.179786>},{<0.704.0>,#Ref<0.1951712407.4194041858.179792>},{<0.703.0>,#Ref<0.1951712407.4194041860.179783>},{<0.702.0>,#Ref<0.1951712407.4194041858.179790>},{<0.701.0>,#Ref<0.1951712407.4194041860.179780>},{<0.700.0>,#Ref<0.1951712407.4194041860.179778>},{<0.699.0>,#Ref<0.1951712407.4194041860.179775>},{<0.698.0>,#Ref<0.1951712407.4194041860.179772>},{<0.697.0>,#Ref<0.1951712407.4194041858.179787>},{<0.696.0>,#Ref<0.1951712407.4194041859.187884>},{<0.695.0>,#Ref<0.1951712407.4194041858.179784>},{<0.694.0>,#Ref<0.1951712407.4194041860.179769>},{<0.693.0>,#Ref<0.1951712407.4194041859.187881>},{<0.692.0>,#Ref<0.1951712407.4194041858.179781>},{<0.691.0>,#Ref<0.1951712407.4194041858.179777>},{<0.690.0>,#Ref<0.1951712407.4194041860.179766>},{<0.689.0>,#Ref<0.1951712407.4194041859.187878>},{<0.688.0>,#Ref<0.1951712407.4194041860.179763>},{<0.687.0>,#Ref<0.1951712407.4194041860.179759>},{<0.686.0>,#Ref<0.1951712407.4194041860.179757>},{<0.685.0>,#Ref<0.1951712407.4194041860.179753>},{<0.684.0>,#Ref<0.1951712407.4194041858.179775>},{<0.683.0>,#Ref<0.1951712407.4194041860.179750>},{<0.682.0>,#Ref<0.1951712407.4194041860.179748>},{<0.681.0>,#Ref<0.1951712407.4194041860.179744>},{<0.680.0>,#Ref<0.1951712407.4194041860.179741>},{<0.679.0>,#Ref<0.1951712407.4194041860.179739>},{<0.678.0>,#Ref<0.1951712407.4194041860.179735>},{<0.677.0>,#Ref<0.1951712407.4194041860.179732>},{<0.676.0>,#Ref<0.1951712407.4194041860.179730>},{<0.675.0>,#Ref<0.1951712407.4194041860.179727>},{<0.674.0>,#Ref<0.1951712407.4194041860.179723>},{<0.673.0>,#Ref<0.1951712407.4194041860.179720>},{<0.672.0>,#Ref<0.1951712407.4194041860.179717>},{<0.671.0>,#Ref<0.1951712407.4194041860.179714>},{<0.670.0>,#Ref<0.1951712407.4194041860.179711>},{<0.669.0>,#Ref<0.1951712407.4194041860.179709>},{<0.668.0>,#Ref<0.1951712407.4194041860.179706>},{<0.667.0>,#Ref<0.1951712407.4194041860.179702>},{<0.666.0>,#Ref<0.1951712407.4194041860.179700>},{<0.665.0>,#Ref<0.1951712407.4194041860.179696>},{<0.664.0>,#Ref<0.1951712407.4194041860.179694>},{<0.663.0>,#Ref<0.1951712407.4194041860.179691>},{<0.662.0>,#Ref<0.1951712407.4194041860.179687>},{<0.661.0>,#Ref<0.1951712407.4194041860.179685>},{<0.660.0>,#Ref<0.1951712407.4194041859.187875>},{<0.659.0>,#Ref<0.1951712407.4194041860.179682>},{<0.658.0>,#Ref<0.1951712407.4194041859.187871>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[150176867136992872|137932716306390254]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.720.0>},custom_consumer => nil,pid => <0.741.0>},channel_ref => #Ref<0.1951712407.4194041857.179853>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-VUG1oi0tWbB5wbIszbC-Ww">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-bgIBngjjUcHwjhL4Ez3czw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.707.0>,#Ref<0.1951712407.4194041860.179792>},{<0.706.0>,#Ref<0.1951712407.4194041860.179789>},{<0.705.0>,#Ref<0.1951712407.4194041860.179787>},{<0.704.0>,#Ref<0.1951712407.4194041858.179793>},{<0.703.0>,#Ref<0.1951712407.4194041860.179784>},{<0.702.0>,#Ref<0.1951712407.4194041858.179789>},{<0.701.0>,#Ref<0.1951712407.4194041860.179781>},{<0.700.0>,#Ref<0.1951712407.4194041860.179777>},{<0.699.0>,#Ref<0.1951712407.4194041860.179774>},{<0.698.0>,#Ref<0.1951712407.4194041860.179771>},{<0.697.0>,#Ref<0.1951712407.4194041858.179786>},{<0.696.0>,#Ref<0.1951712407.4194041859.187883>},{<0.695.0>,#Ref<0.1951712407.4194041858.179783>},{<0.694.0>,#Ref<0.1951712407.4194041860.179768>},{<0.693.0>,#Ref<0.1951712407.4194041859.187880>},{<0.692.0>,#Ref<0.1951712407.4194041858.179780>},{<0.691.0>,#Ref<0.1951712407.4194041858.179778>},{<0.690.0>,#Ref<0.1951712407.4194041860.179765>},{<0.689.0>,#Ref<0.1951712407.4194041859.187877>},{<0.688.0>,#Ref<0.1951712407.4194041860.179762>},{<0.687.0>,#Ref<0.1951712407.4194041860.179760>},{<0.686.0>,#Ref<0.1951712407.4194041860.179756>},{<0.685.0>,#Ref<0.1951712407.4194041860.179754>},{<0.684.0>,#Ref<0.1951712407.4194041858.179774>},{<0.683.0>,#Ref<0.1951712407.4194041860.179751>},{<0.682.0>,#Ref<0.1951712407.4194041860.179747>},{<0.681.0>,#Ref<0.1951712407.4194041860.179745>},{<0.680.0>,#Ref<0.1951712407.4194041860.179742>},{<0.679.0>,#Ref<0.1951712407.4194041860.179738>},{<0.678.0>,#Ref<0.1951712407.4194041860.179736>},{<0.677.0>,#Ref<0.1951712407.4194041860.179733>},{<0.676.0>,#Ref<0.1951712407.4194041860.179729>},{<0.675.0>,#Ref<0.1951712407.4194041860.179726>},{<0.674.0>,#Ref<0.1951712407.4194041860.179724>},{<0.673.0>,#Ref<0.1951712407.4194041860.179721>},{<0.672.0>,#Ref<0.1951712407.4194041860.179718>},{<0.671.0>,#Ref<0.1951712407.4194041860.179715>},{<0.670.0>,#Ref<0.1951712407.4194041860.179712>},{<0.669.0>,#Ref<0.1951712407.4194041860.179708>},{<0.668.0>,#Ref<0.1951712407.4194041860.179705>},{<0.667.0>,#Ref<0.1951712407.4194041860.179703>},{<0.666.0>,#Ref<0.1951712407.4194041860.179699>},{<0.665.0>,#Ref<0.1951712407.4194041860.179697>},{<0.664.0>,#Ref<0.1951712407.4194041860.179693>},{<0.663.0>,#Ref<0.1951712407.4194041860.179690>},{<0.662.0>,#Ref<0.1951712407.4194041860.179688>},{<0.661.0>,#Ref<0.1951712407.4194041860.179684>},{<0.660.0>,#Ref<0.1951712407.4194041859.187874>},{<0.659.0>,#Ref<0.1951712407.4194041860.179681>},{<0.658.0>,#Ref<0.1951712407.4194041859.187872>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[133217171739386481|155031613283069111]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.723.0>},custom_consumer => nil,pid => <0.740.0>},channel_ref => #Ref<0.1951712407.4194041857.179855>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-bgIBngjjUcHwjhL4Ez3czw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.656.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-bgIBngjjUcHwjhL4Ez3czw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041857.179855>,process,<0.740.0>,normal},{'EXIT',<0.723.0>,{shutdown,normal}}]
    links: [<0.654.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 65475
  neighbours:
2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.655.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-VUG1oi0tWbB5wbIszbC-Ww">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041857.179853>,process,<0.741.0>,normal},{'EXIT',<0.720.0>,{shutdown,normal}}]
    links: [<0.654.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 70210
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.656.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.655.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-qRaK1Q76qbmVpcOAAvrZxQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[133772683262915|288226932977814679]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.753.0>},custom_consumer => nil,pid => <0.768.0>},channel_ref => #Ref<0.1951712407.4194041858.179966>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-qRaK1Q76qbmVpcOAAvrZxQ">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-gNSPGdVA_Nk9Vvj0YCTu0A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[264635190099224660|23548359503022858]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.750.0>},custom_consumer => nil,pid => <0.772.0>},channel_ref => #Ref<0.1951712407.4194041857.180033>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-gNSPGdVA_Nk9Vvj0YCTu0A">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.747.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-qRaK1Q76qbmVpcOAAvrZxQ">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041858.179966>,process,<0.768.0>,normal},{'EXIT',<0.753.0>,{shutdown,normal}}]
    links: [<0.654.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 47919
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.747.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.746.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-gNSPGdVA_Nk9Vvj0YCTu0A">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041857.180033>,process,<0.772.0>,normal},{'EXIT',<0.750.0>,{shutdown,normal}}]
    links: [<0.654.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 47914
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.746.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-zI8tQ7cUoblkn6AUQnUgrA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[18521739565459481|53530189526059248]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.784.0>},custom_consumer => nil,pid => <0.798.0>},channel_ref => #Ref<0.1951712407.4194041858.180055>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-zI8tQ7cUoblkn6AUQnUgrA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-sJFser1OhthgezE9x3grLg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[220083582117329635|140250252739312740]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.780.0>},custom_consumer => nil,pid => <0.802.0>},channel_ref => #Ref<0.1951712407.4194041857.180146>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-sJFser1OhthgezE9x3grLg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.777.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-zI8tQ7cUoblkn6AUQnUgrA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041858.180055>,process,<0.798.0>,normal},{'EXIT',<0.784.0>,{shutdown,normal}}]
    links: [<0.654.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 47915
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.777.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown
     Reason:     reached_max_restart_intensity
     Offender:   [{pid,<0.777.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.776.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 4
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-sJFser1OhthgezE9x3grLg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041857.180146>,process,<0.802.0>,normal},{'EXIT',<0.780.0>,{shutdown,normal}},{'EXIT',<0.654.0>,shutdown}]
    links: []
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 47931
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    shutdown_error
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.776.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.Supervisor'}
     Context:    child_terminated
     Reason:     shutdown
     Offender:   [{pid,<0.654.0>},{id,#Ref<0.1951712407.4194041860.179369>},{mfargs,{'Elixir.Supervisor',start_link,[[#{id => 'Elixir.Example.Pipeline.Broadway.Producer_0',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},#{id => 'Elixir.Example.Pipeline.Broadway.Producer_1',shutdown => 30000,start => {'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}}],[{name,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'},{strategy,one_for_one},{max_restarts,4},{max_seconds,2}]]}},{restart_type,permanent},{significant,false},{shutdown,infinity},{child_type,supervisor}]

2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-8BJMjpB2nPCRRM0nGwV9fA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.872.0>,#Ref<0.1951712407.4194041863.179557>},{<0.870.0>,#Ref<0.1951712407.4194041863.179554>},{<0.868.0>,#Ref<0.1951712407.4194041863.179551>},{<0.866.0>,#Ref<0.1951712407.4194041863.179548>},{<0.865.0>,#Ref<0.1951712407.4194041863.179545>},{<0.864.0>,#Ref<0.1951712407.4194041857.180332>},{<0.863.0>,#Ref<0.1951712407.4194041863.179543>},{<0.862.0>,#Ref<0.1951712407.4194041863.179540>},{<0.861.0>,#Ref<0.1951712407.4194041863.179536>},{<0.860.0>,#Ref<0.1951712407.4194041857.180327>},{<0.859.0>,#Ref<0.1951712407.4194041857.180325>},{<0.858.0>,#Ref<0.1951712407.4194041857.180322>},{<0.857.0>,#Ref<0.1951712407.4194041857.180318>},{<0.856.0>,#Ref<0.1951712407.4194041857.180316>},{<0.855.0>,#Ref<0.1951712407.4194041857.180313>},{<0.854.0>,#Ref<0.1951712407.4194041857.180310>},{<0.853.0>,#Ref<0.1951712407.4194041857.180306>},{<0.852.0>,#Ref<0.1951712407.4194041857.180303>},{<0.851.0>,#Ref<0.1951712407.4194041857.180300>},{<0.850.0>,#Ref<0.1951712407.4194041857.180298>},{<0.849.0>,#Ref<0.1951712407.4194041857.180294>},{<0.848.0>,#Ref<0.1951712407.4194041857.180292>},{<0.847.0>,#Ref<0.1951712407.4194041857.180289>},{<0.846.0>,#Ref<0.1951712407.4194041857.180285>},{<0.845.0>,#Ref<0.1951712407.4194041857.180283>},{<0.844.0>,#Ref<0.1951712407.4194041863.179532>},{<0.843.0>,#Ref<0.1951712407.4194041858.180349>},{<0.842.0>,#Ref<0.1951712407.4194041863.179529>},{<0.841.0>,#Ref<0.1951712407.4194041863.179525>},{<0.837.0>,#Ref<0.1951712407.4194041863.179522>},{<0.833.0>,#Ref<0.1951712407.4194041863.179519>},{<0.831.0>,#Ref<0.1951712407.4194041857.180280>},{<0.830.0>,#Ref<0.1951712407.4194041858.180335>},{<0.829.0>,#Ref<0.1951712407.4194041857.180275>},{<0.828.0>,#Ref<0.1951712407.4194041858.180333>},{<0.827.0>,#Ref<0.1951712407.4194041858.180329>},{<0.826.0>,#Ref<0.1951712407.4194041857.180273>},{<0.825.0>,#Ref<0.1951712407.4194041857.180269>},{<0.824.0>,#Ref<0.1951712407.4194041858.180325>},{<0.823.0>,#Ref<0.1951712407.4194041857.180266>},{<0.822.0>,#Ref<0.1951712407.4194041858.180321>},{<0.821.0>,#Ref<0.1951712407.4194041863.179403>},{<0.820.0>,#Ref<0.1951712407.4194041857.180262>},{<0.819.0>,#Ref<0.1951712407.4194041857.180260>},{<0.818.0>,#Ref<0.1951712407.4194041857.180257>},{<0.817.0>,#Ref<0.1951712407.4194041857.180253>},{<0.816.0>,#Ref<0.1951712407.4194041857.180251>},{<0.815.0>,#Ref<0.1951712407.4194041857.180247>},{<0.814.0>,#Ref<0.1951712407.4194041857.180245>},{<0.811.0>,#Ref<0.1951712407.4194041857.180242>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[83330183141619451|132834744124825810]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.813.0>},custom_consumer => nil,pid => <0.890.0>},channel_ref => #Ref<0.1951712407.4194041863.179611>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-8BJMjpB2nPCRRM0nGwV9fA">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-FBnZwWJ0ubiTpluSy69Pnw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [{<0.872.0>,#Ref<0.1951712407.4194041863.179558>},{<0.870.0>,#Ref<0.1951712407.4194041863.179555>},{<0.868.0>,#Ref<0.1951712407.4194041863.179552>},{<0.866.0>,#Ref<0.1951712407.4194041863.179549>},{<0.865.0>,#Ref<0.1951712407.4194041863.179546>},{<0.864.0>,#Ref<0.1951712407.4194041857.180331>},{<0.863.0>,#Ref<0.1951712407.4194041863.179542>},{<0.862.0>,#Ref<0.1951712407.4194041863.179539>},{<0.861.0>,#Ref<0.1951712407.4194041863.179537>},{<0.860.0>,#Ref<0.1951712407.4194041857.180328>},{<0.859.0>,#Ref<0.1951712407.4194041857.180324>},{<0.858.0>,#Ref<0.1951712407.4194041857.180321>},{<0.857.0>,#Ref<0.1951712407.4194041857.180319>},{<0.856.0>,#Ref<0.1951712407.4194041857.180315>},{<0.855.0>,#Ref<0.1951712407.4194041857.180312>},{<0.854.0>,#Ref<0.1951712407.4194041857.180309>},{<0.853.0>,#Ref<0.1951712407.4194041857.180307>},{<0.852.0>,#Ref<0.1951712407.4194041857.180304>},{<0.851.0>,#Ref<0.1951712407.4194041857.180301>},{<0.850.0>,#Ref<0.1951712407.4194041857.180297>},{<0.849.0>,#Ref<0.1951712407.4194041857.180295>},{<0.848.0>,#Ref<0.1951712407.4194041857.180291>},{<0.847.0>,#Ref<0.1951712407.4194041857.180288>},{<0.846.0>,#Ref<0.1951712407.4194041857.180286>},{<0.845.0>,#Ref<0.1951712407.4194041857.180282>},{<0.844.0>,#Ref<0.1951712407.4194041863.179533>},{<0.843.0>,#Ref<0.1951712407.4194041858.180348>},{<0.842.0>,#Ref<0.1951712407.4194041863.179530>},{<0.841.0>,#Ref<0.1951712407.4194041863.179526>},{<0.837.0>,#Ref<0.1951712407.4194041863.179523>},{<0.833.0>,#Ref<0.1951712407.4194041863.179520>},{<0.831.0>,#Ref<0.1951712407.4194041857.180279>},{<0.830.0>,#Ref<0.1951712407.4194041858.180336>},{<0.829.0>,#Ref<0.1951712407.4194041857.180276>},{<0.828.0>,#Ref<0.1951712407.4194041858.180332>},{<0.827.0>,#Ref<0.1951712407.4194041858.180330>},{<0.826.0>,#Ref<0.1951712407.4194041857.180272>},{<0.825.0>,#Ref<0.1951712407.4194041857.180270>},{<0.824.0>,#Ref<0.1951712407.4194041858.180324>},{<0.823.0>,#Ref<0.1951712407.4194041857.180267>},{<0.822.0>,#Ref<0.1951712407.4194041858.180322>},{<0.821.0>,#Ref<0.1951712407.4194041863.179404>},{<0.820.0>,#Ref<0.1951712407.4194041857.180263>},{<0.819.0>,#Ref<0.1951712407.4194041857.180259>},{<0.818.0>,#Ref<0.1951712407.4194041857.180256>},{<0.817.0>,#Ref<0.1951712407.4194041857.180254>},{<0.816.0>,#Ref<0.1951712407.4194041857.180250>},{<0.815.0>,#Ref<0.1951712407.4194041857.180248>},{<0.814.0>,#Ref<0.1951712407.4194041857.180244>},{<0.811.0>,#Ref<0.1951712407.4194041857.180241>}],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[261843437410462510|242527511731895873]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.839.0>},custom_consumer => nil,pid => <0.894.0>},channel_ref => #Ref<0.1951712407.4194041857.180413>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-FBnZwWJ0ubiTpluSy69Pnw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.807.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-8BJMjpB2nPCRRM0nGwV9fA">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041863.179611>,process,<0.890.0>,normal},{'EXIT',<0.813.0>,{shutdown,normal}}]
    links: [<0.806.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 64773
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.807.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.808.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-FBnZwWJ0ubiTpluSy69Pnw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041857.180413>,process,<0.894.0>,normal},{'EXIT',<0.839.0>,{shutdown,normal}}]
    links: [<0.806.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 6772
    stack_size: 28
    reductions: 64660
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.808.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_1' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-StVUizi3iEl0JGZVUc6nSw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[125426749214956808|18676176161412739]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.905.0>},custom_consumer => nil,pid => <0.924.0>},channel_ref => #Ref<0.1951712407.4194041858.180612>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-StVUizi3iEl0JGZVUc6nSw">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,1},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-0wvq56DC7sLZcejWXs6KRg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[266873869144745527|237499154038749696]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.902.0>},custom_consumer => nil,pid => <0.920.0>},channel_ref => #Ref<0.1951712407.4194041858.180619>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-0wvq56DC7sLZcejWXs6KRg">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.899.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_1'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-StVUizi3iEl0JGZVUc6nSw">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041858.180612>,process,<0.924.0>,normal},{'EXIT',<0.905.0>,{shutdown,normal}}]
    links: [<0.806.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 47920
  neighbours:
2021-08-07 17:52:44 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.899.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_1'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],1,[{name,'Elixir.Example.Pipeline.Broadway.Producer_1'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:44 =CRASH REPORT====
  crasher:
    initial call: Elixir.GenStage:init/1
    pid: <0.898.0>
    registered_name: 'Elixir.Example.Pipeline.Broadway.Producer_0'
    exception error: {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
    ancestors: ['Elixir.Example.Pipeline.Broadway.ProducerSupervisor','Elixir.Example.Pipeline.Broadway.Supervisor','Elixir.Example.Pipeline','Elixir.Example.Supervisor',<0.493.0>]
    message_queue_len: 3
    messages: [{basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-0wvq56DC7sLZcejWXs6KRg">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 2,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}},{'DOWN',#Ref<0.1951712407.4194041858.180619>,process,<0.920.0>,normal},{'EXIT',<0.902.0>,{shutdown,normal}}]
    links: [<0.806.0>]
    dictionary: [{gen_server_call_timeout,60000}]
    trap_exit: true
    status: running
    heap_size: 4185
    stack_size: 28
    reductions: 47909
  neighbours:
2021-08-07 17:52:45 =SUPERVISOR REPORT====
     Supervisor: {local,'Elixir.Example.Pipeline.Broadway.ProducerSupervisor'}
     Context:    child_terminated
     Reason:     {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
     Offender:   [{pid,<0.898.0>},{id,'Elixir.Example.Pipeline.Broadway.Producer_0'},{mfargs,{'Elixir.Broadway.Topology.ProducerStage',start_link,[[{broadway,[{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{dispatcher,'Elixir.GenStage.DemandDispatcher'},{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}],0,[{name,'Elixir.Example.Pipeline.Broadway.Producer_0'},{hibernate_after,15000}]]}},{restart_type,permanent},{significant,false},{shutdown,30000},{child_type,worker}]

2021-08-07 17:52:45 =ERROR REPORT====
** Generic server 'Elixir.Example.Pipeline.Broadway.Producer_0' terminating 
** Last message in was {basic_deliver,<<"{\"a\":1}">>,#{app_id => undefined,cluster_id => undefined,consumer_tag => <<"amq.ctag-sOkyQT92Itrboz3j0N4L1w">>,content_encoding => undefined,content_type => undefined,correlation_id => undefined,delivery_tag => 1,exchange => <<>>,expiration => undefined,headers => undefined,message_id => undefined,persistent => false,priority => undefined,redelivered => true,reply_to => undefined,routing_key => <<"my_queue">>,timestamp => undefined,type => undefined,user_id => undefined}}
** When Server state == #{consumers => [],module => 'Elixir.BroadwayRabbitMQ.Producer',module_state => #{backoff => #{'__struct__' => 'Elixir.BroadwayRabbitMQ.Backoff',max => 30000,min => 1000,state => {1000,10000,{rand,{#{jump => #Fun<rand.3.92093067>,max => 288230376151711743,next => #Fun<rand.5.92093067>,type => exsplus},[236741061802823382|195574304674676025]}}},type => rand_exp},channel => #{'__struct__' => 'Elixir.AMQP.Channel',conn => #{'__struct__' => 'Elixir.AMQP.Connection',pid => <0.935.0>},custom_consumer => nil,pid => <0.950.0>},channel_ref => #Ref<0.1951712407.4194041858.180753>,client => 'Elixir.BroadwayRabbitMQ.AmqpClient',config => #{after_connect => #Fun<Elixir.BroadwayRabbitMQ.AmqpClient.1.131640819>,bindings => [],connection => [],consume_options => [],declare_opts => nil,metadata => [],name => undefined,qos => [{prefetch_count,50}],queue => <<"my_queue">>},consumer_tag => <<"amq.ctag-sOkyQT92Itrboz3j0N4L1w">>,on_failure => reject_and_requeue,on_success => ack,opts => [{broadway,[{index,0},{hibernate_after,15000},{context,context_not_set},{resubscribe_interval,100},{max_seconds,5},{max_restarts,3},{shutdown,30000},{name,'Elixir.Example.Pipeline'},{producer,[{hibernate_after,15000},{module,{'Elixir.BroadwayRabbitMQ.Producer',[{queue,<<"my_queue">>}]}},{transformer,{'Elixir.Example.Pipeline',transform,[]}},{concurrency,2}]},{processors,[{default,[{hibernate_after,15000},{max_demand,10},{concurrency,50}]}]},{batchers,[{default,[{hibernate_after,15000},{batch_size,10},{batch_timeout,1500},{concurrency,5}]}]}]},{queue,<<"my_queue">>}]},rate_limiting => nil,transformer => {'Elixir.Example.Pipeline',transform,[]}}
** Reason for termination ==
** {#{'__exception__' => true,'__struct__' => 'Elixir.RuntimeError',message => <<"the produced message is invalid. All messages must be a %Broadway.Message{} struct. In case you're using a standard GenStage producer, please set the :transformer option to transform produced events into message structs">>},[{'Elixir.Broadway.Topology.ProducerStage',validate_message,1,[{file,"lib/broadway/topology/producer_stage.ex"},{line,279}]},{'Elixir.Broadway.Topology.ProducerStage','-transform_events/2-fun-0-',5,[{file,"lib/broadway/topology/producer_stage.ex"},{line,270}]},{'Elixir.Enum','-reduce/3-lists^foldl/2-0-',3,[{file,"lib/enum.ex"},{line,2385}]},{'Elixir.Broadway.Topology.ProducerStage',transform_events,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,268}]},{'Elixir.Broadway.Topology.ProducerStage',handle_no_reply,2,[{file,"lib/broadway/topology/producer_stage.ex"},{line,244}]},{'Elixir.GenStage',noreply_callback,3,[{file,"lib/gen_stage.ex"},{line,2108}]},{gen_server,try_dispatch,4,[{file,"gen_server.erl"},{line,695}]},{gen_server,handle_msg,6,[{file,"gen_server.erl"},{line,771}]},{proc_lib,init_p_do_apply,3,[{file,"proc_lib.erl"},{line,226}]}]}
